// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using idflApp.Data;

#nullable disable

namespace idflApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240313045254_add_user_book_table")]
    partial class add_user_book_table
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Models.ClientModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<int>("AccountRole")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActiveAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("BusinessLicenseFile")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("District")
                        .HasColumnType("longtext");

                    b.Property<string>("Dob")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FaxNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("IDCardNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsThirdParty")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Representator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RepresentatorTitle")
                        .HasColumnType("longtext");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Ward")
                        .HasColumnType("longtext");

                    b.Property<string>("Website")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("dbclient", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e0eabd7c-540a-4214-b2b4-8102d86699e2"),
                            AccountName = "client 1",
                            AccountNumber = 128743,
                            AccountRole = 0,
                            ActiveAt = new DateTime(2024, 3, 13, 11, 52, 54, 421, DateTimeKind.Local).AddTicks(7631),
                            Address = "TPHCM",
                            BusinessLicenseFile = "/uploads/docs/122BC4DD.pdf",
                            CompanyName = "CTy TNHH MTV SCC",
                            ContactPerson = "0982288888",
                            CreatedAt = new DateTime(2024, 3, 13, 11, 52, 54, 421, DateTimeKind.Local).AddTicks(7627),
                            District = "10",
                            Email = "client_1@gmail.com",
                            FaxNumber = "10099922",
                            IDCardNumber = "1235888570",
                            IsActive = true,
                            IsDeleted = false,
                            IsThirdParty = false,
                            IsVerified = true,
                            Password = "m9fUsQskgQAZZPVNkXc3ag==",
                            Phone = "0983373388",
                            Representator = "Client example",
                            RepresentatorTitle = "Director Manager",
                            TaxNumber = "12358799",
                            VerifiedAt = new DateTime(2024, 3, 13, 11, 52, 54, 421, DateTimeKind.Local).AddTicks(7634),
                            Ward = "5",
                            Website = "scc.com"
                        },
                        new
                        {
                            Id = new Guid("dfeeb086-a786-45c2-b0bc-7f85c32378e5"),
                            AccountName = "client 2",
                            AccountNumber = 123587,
                            AccountRole = 0,
                            ActiveAt = new DateTime(2024, 3, 13, 11, 52, 54, 422, DateTimeKind.Local).AddTicks(4788),
                            Address = "TPHCM",
                            BusinessLicenseFile = "/uploads/docs/122BC4DD.pdf",
                            CompanyName = "CTy TNHH MTV SCB",
                            ContactPerson = "0982288888",
                            CreatedAt = new DateTime(2024, 3, 13, 11, 52, 54, 422, DateTimeKind.Local).AddTicks(4783),
                            District = "10",
                            Email = "client_2@gmail.com",
                            FaxNumber = "10099922",
                            IDCardNumber = "1235888570",
                            IsActive = true,
                            IsDeleted = false,
                            IsThirdParty = true,
                            IsVerified = true,
                            Password = "m9fUsQskgQAZZPVNkXc3ag==",
                            Phone = "0983373388",
                            Representator = "Client example",
                            RepresentatorTitle = "Director Manager",
                            TaxNumber = "12358799",
                            VerifiedAt = new DateTime(2024, 3, 13, 11, 52, 54, 422, DateTimeKind.Local).AddTicks(4789),
                            Ward = "5",
                            Website = "scc.com"
                        });
                });

            modelBuilder.Entity("idflApp.Core.Models.BookModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BgColor")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("CompletedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CompletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CompletedNotes")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Occupancy")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SubTitle")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CompletedBy");

                    b.HasIndex("ProjectId");

                    b.ToTable("dbbooking", (string)null);
                });

            modelBuilder.Entity("idflApp.Core.Models.BookUserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AuditorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("dbbookusertable", (string)null);
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectGeneralModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BannedCertificationDescription")
                        .HasColumnType("longtext");

                    b.Property<int?>("ClientNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeniedCertificationDescription")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsEmergency")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRushCertificate")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProjectCode")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ProjectName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("dbprojectgeneral", (string)null);
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CertificationBody")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CertificationExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("HandledBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("IdflCode")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsAnotherCertification")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsInitialCertification")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRenewalCertification")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IssueCertificated")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("IssueCertificatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LicenseNo")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("PayerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ProjectGeneralId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("StandardId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("HandledBy");

                    b.HasIndex("IdflCode")
                        .IsUnique();

                    b.HasIndex("StandardId");

                    b.ToTable("dbproject", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("07085e67-92e9-483d-b75b-d32db3a2d351"),
                            CertificationBody = "Test",
                            CertificationExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ClientId = new Guid("e0eabd7c-540a-4214-b2b4-8102d86699e2"),
                            CreatedAt = new DateTime(2024, 3, 13, 11, 52, 54, 422, DateTimeKind.Local).AddTicks(5034),
                            IdflCode = "223787XC",
                            IsAnotherCertification = true,
                            IsDeleted = false,
                            IsInitialCertification = true,
                            IsRenewalCertification = true,
                            IssueCertificated = false,
                            IssueCertificatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LicenseNo = "12233XYUC",
                            StandardId = new Guid("43783d44-651e-4729-8917-4493d042cff8"),
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("4c06d574-f2d3-4ced-a07b-8ebdaa5560ea"),
                            CertificationBody = "certification 1",
                            CertificationExpirationDate = new DateTime(2024, 3, 13, 11, 52, 54, 422, DateTimeKind.Local).AddTicks(5037),
                            ClientId = new Guid("e0eabd7c-540a-4214-b2b4-8102d86699e2"),
                            CreatedAt = new DateTime(2024, 3, 13, 11, 52, 54, 422, DateTimeKind.Local).AddTicks(5038),
                            IdflCode = "223407XC",
                            IsAnotherCertification = true,
                            IsDeleted = false,
                            IsInitialCertification = true,
                            IsRenewalCertification = false,
                            IssueCertificated = false,
                            IssueCertificatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LicenseNo = "12233XYUC",
                            StandardId = new Guid("43783d44-651e-4729-8917-4493d042cff8"),
                            Status = "Verified"
                        },
                        new
                        {
                            Id = new Guid("0d9bd992-a76a-43d5-8fc7-87f6d9b33266"),
                            CertificationBody = "certification 2",
                            CertificationExpirationDate = new DateTime(2024, 3, 13, 11, 52, 54, 422, DateTimeKind.Local).AddTicks(5041),
                            ClientId = new Guid("e0eabd7c-540a-4214-b2b4-8102d86699e2"),
                            CreatedAt = new DateTime(2024, 3, 13, 11, 52, 54, 422, DateTimeKind.Local).AddTicks(5042),
                            IdflCode = "223TTT010",
                            IsAnotherCertification = true,
                            IsDeleted = false,
                            IsInitialCertification = true,
                            IsRenewalCertification = false,
                            IssueCertificated = true,
                            IssueCertificatedDate = new DateTime(2024, 3, 13, 11, 52, 54, 422, DateTimeKind.Local).AddTicks(5042),
                            LicenseNo = "12233XYUC",
                            StandardId = new Guid("43783d44-651e-4729-8917-4493d042cff8"),
                            Status = "Certificated"
                        },
                        new
                        {
                            Id = new Guid("b4f2cac4-1243-4977-91e2-ebce3cc5e724"),
                            CertificationBody = "certification 3",
                            CertificationExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ClientId = new Guid("e0eabd7c-540a-4214-b2b4-8102d86699e2"),
                            CreatedAt = new DateTime(2024, 3, 13, 11, 52, 54, 422, DateTimeKind.Local).AddTicks(5045),
                            IdflCode = "223TTT009",
                            IsAnotherCertification = true,
                            IsDeleted = false,
                            IsInitialCertification = true,
                            IsRenewalCertification = false,
                            IssueCertificated = false,
                            IssueCertificatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LicenseNo = "12233XYUC",
                            StandardId = new Guid("43783d44-651e-4729-8917-4493d042cff8"),
                            Status = "Approved"
                        });
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectStandardCategoryModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("ProjectStandardCategory");
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectStandardModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ProjectStandardCategoryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectStandardCategoryId");

                    b.ToTable("dbprojectstandard", (string)null);
                });

            modelBuilder.Entity("idflApp.Core.Models.StandardAnswerModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsYesNo")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Question")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("StandardQuestionId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("dbstandardanswer", (string)null);
                });

            modelBuilder.Entity("idflApp.Core.Models.StandardModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StandardCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("dbstandard", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("43783d44-651e-4729-8917-4493d042cff8"),
                            CreatedAt = new DateTime(2024, 3, 13, 11, 52, 54, 422, DateTimeKind.Local).AddTicks(4893),
                            Description = "IDFL may not issue an OCS scope certificate to an organization which holds a GOTS scope certificate with another certification body, unless the GOTS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Organic Content Standard",
                            StandardCode = "OCS"
                        },
                        new
                        {
                            Id = new Guid("a12ec893-5cc4-47f5-9daf-eb8dc1d002e6"),
                            CreatedAt = new DateTime(2024, 3, 13, 11, 52, 54, 422, DateTimeKind.Local).AddTicks(4907),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Responsible Animal Fiber",
                            StandardCode = "RAF"
                        },
                        new
                        {
                            Id = new Guid("827b59c4-3352-4894-aafe-6aa481c73c89"),
                            CreatedAt = new DateTime(2024, 3, 13, 11, 52, 54, 422, DateTimeKind.Local).AddTicks(4909),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Tiêu Chuẩn Len Có Trách Nhiệm",
                            StandardCode = "RWS"
                        },
                        new
                        {
                            Id = new Guid("e5b5d400-bc26-4a56-b3c3-03da1dc3e989"),
                            CreatedAt = new DateTime(2024, 3, 13, 11, 52, 54, 422, DateTimeKind.Local).AddTicks(4911),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Tiêu Chuẩn Mohair Có Trách Nhiệm",
                            StandardCode = "RMS"
                        },
                        new
                        {
                            Id = new Guid("98bccc47-d4c9-4b3b-84cd-f7e85ac0169e"),
                            CreatedAt = new DateTime(2024, 3, 13, 11, 52, 54, 422, DateTimeKind.Local).AddTicks(4912),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Tiêu Chuẩn Alpaca Có Trách Nhiệm",
                            StandardCode = "RAS"
                        },
                        new
                        {
                            Id = new Guid("197cd40d-8b76-4184-bf92-37b30fbddb28"),
                            CreatedAt = new DateTime(2024, 3, 13, 11, 52, 54, 422, DateTimeKind.Local).AddTicks(4896),
                            Description = "IDFL may not issue a GOTS scope certificate to an organization which holds a OCS scope certificate with another certification body, unless the GOTS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Global Organic Textile Standard",
                            StandardCode = "GOTS"
                        },
                        new
                        {
                            Id = new Guid("428387cd-78aa-496c-bfb1-f071923566af"),
                            CreatedAt = new DateTime(2024, 3, 13, 11, 52, 54, 422, DateTimeKind.Local).AddTicks(4898),
                            Description = "IDFL may not issue a GRS scope certificate to an organization which holds a RCS scope certificate with another certification body, unless the RCS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Global Recycled Standard",
                            StandardCode = "GRS"
                        },
                        new
                        {
                            Id = new Guid("2ecf7c41-0b8a-48cf-8a01-02733675e942"),
                            CreatedAt = new DateTime(2024, 3, 13, 11, 52, 54, 422, DateTimeKind.Local).AddTicks(4904),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Recycled Claim Standard",
                            StandardCode = "RCS"
                        },
                        new
                        {
                            Id = new Guid("ae8ab4f9-15b2-4fd5-b9ed-4a2d5204e3e3"),
                            CreatedAt = new DateTime(2024, 3, 13, 11, 52, 54, 422, DateTimeKind.Local).AddTicks(4906),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Responsible Down Standard",
                            StandardCode = "RDS"
                        });
                });

            modelBuilder.Entity("idflApp.Core.Models.StandardQuestionModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Question")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("StandardId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("StandardId");

                    b.ToTable("dbstandardquestion", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("67dab7a8-ea9d-4a9f-a363-7bc91e0a0178"),
                            CreatedAt = new DateTime(2024, 3, 13, 11, 52, 54, 422, DateTimeKind.Local).AddTicks(4953),
                            IsActive = true,
                            Question = "Are there any subcontractor facilities that trade / handle / process certified products in this scope of certification? If so, please indicate by noting in the List of Activities / Processes",
                            StandardId = new Guid("43783d44-651e-4729-8917-4493d042cff8")
                        },
                        new
                        {
                            Id = new Guid("83df4dde-5325-4ad8-b53a-2c4254f26efa"),
                            CreatedAt = new DateTime(2024, 3, 13, 11, 52, 54, 422, DateTimeKind.Local).AddTicks(4957),
                            IsActive = true,
                            Question = "OEKO-TEX STEP Environmental Performance Requirements | Yêu cầu về Hiệu suất Môi trường của Oeko - Tex Step",
                            StandardId = new Guid("43783d44-651e-4729-8917-4493d042cff8")
                        },
                        new
                        {
                            Id = new Guid("280a9d41-052b-4706-9807-3c492ef4bf22"),
                            CreatedAt = new DateTime(2024, 3, 13, 11, 52, 54, 422, DateTimeKind.Local).AddTicks(4961),
                            IsActive = true,
                            Question = "SCS Recycled Content Verification | Xác Minh Thành Phần Tái Chế SCS",
                            StandardId = new Guid("43783d44-651e-4729-8917-4493d042cff8")
                        });
                });

            modelBuilder.Entity("idflApp.Core.Models.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ActiveDateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("District")
                        .HasColumnType("longtext");

                    b.Property<string>("Dob")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Icon")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Roles")
                        .HasColumnType("int");

                    b.Property<string>("SubTitle")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("VerifiedDateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Ward")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("dbuser", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d149adac-0d34-4c68-8e45-c375c8c31fef"),
                            AccountName = "Pham Anh Doan",
                            ActiveDateAt = new DateTime(2024, 3, 13, 11, 52, 54, 419, DateTimeKind.Local).AddTicks(5574),
                            CreatedAt = new DateTime(2024, 3, 13, 11, 52, 54, 419, DateTimeKind.Local).AddTicks(5562),
                            Email = "test_1@gmail.com",
                            Icon = "https://picsum.photos/24",
                            IsActive = true,
                            IsDeleted = false,
                            IsVerified = true,
                            Password = "m9fUsQskgQAZZPVNkXc3ag==",
                            Phone = "123587777",
                            Roles = 0,
                            Title = "Developer",
                            VerifiedDateAt = new DateTime(2024, 3, 13, 11, 52, 54, 419, DateTimeKind.Local).AddTicks(5576)
                        },
                        new
                        {
                            Id = new Guid("f37be52c-d08f-429d-94be-5aa90a54e35e"),
                            AccountName = "Pham Anh Teo",
                            ActiveDateAt = new DateTime(2024, 3, 13, 11, 52, 54, 420, DateTimeKind.Local).AddTicks(2405),
                            CreatedAt = new DateTime(2024, 3, 13, 11, 52, 54, 420, DateTimeKind.Local).AddTicks(2404),
                            Email = "test_2@gmail.com",
                            Icon = "https://picsum.photos/24",
                            IsActive = true,
                            IsDeleted = false,
                            IsVerified = true,
                            Password = "m9fUsQskgQAZZPVNkXc3ag==",
                            Phone = "123587777",
                            Roles = 1,
                            Title = "Auditor",
                            VerifiedDateAt = new DateTime(2024, 3, 13, 11, 52, 54, 420, DateTimeKind.Local).AddTicks(2405)
                        },
                        new
                        {
                            Id = new Guid("2bb14793-b212-400f-9916-846757d1f96a"),
                            AccountName = "Tran thanh sang",
                            ActiveDateAt = new DateTime(2024, 3, 13, 11, 52, 54, 420, DateTimeKind.Local).AddTicks(9223),
                            CreatedAt = new DateTime(2024, 3, 13, 11, 52, 54, 420, DateTimeKind.Local).AddTicks(9222),
                            Email = "test_3@gmail.com",
                            Icon = "https://picsum.photos/24",
                            IsActive = true,
                            IsDeleted = false,
                            IsVerified = true,
                            Password = "m9fUsQskgQAZZPVNkXc3ag==",
                            Phone = "123587777",
                            Roles = 1,
                            Title = "Auditor Supervisor",
                            VerifiedDateAt = new DateTime(2024, 3, 13, 11, 52, 54, 420, DateTimeKind.Local).AddTicks(9223)
                        });
                });

            modelBuilder.Entity("idflApp.Core.Models.BookModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.UserModel", "UserModel")
                        .WithMany("BookModels")
                        .HasForeignKey("CompletedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("idflApp.Core.Models.ProjectModel", "ProjectModel")
                        .WithMany("BookModels")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ProjectModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("idflApp.Core.Models.BookUserModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.BookModel", "BookModel")
                        .WithMany("BookUserModels")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_user_table_book");

                    b.Navigation("BookModel");
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectGeneralModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.ProjectModel", "ProjectModel")
                        .WithOne("ProjectGeneralModel")
                        .HasForeignKey("idflApp.Core.Models.ProjectGeneralModel", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_general_project");

                    b.Navigation("ProjectModel");
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectModel", b =>
                {
                    b.HasOne("Core.Models.ClientModel", "ClientModel")
                        .WithMany("ProjectModels")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_client");

                    b.HasOne("idflApp.Core.Models.UserModel", "UserModel")
                        .WithMany("ProjectModels")
                        .HasForeignKey("HandledBy")
                        .HasConstraintName("fk_project_user");

                    b.HasOne("idflApp.Core.Models.StandardModel", "StandardModel")
                        .WithMany("ProjectModels")
                        .HasForeignKey("StandardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_standard");

                    b.Navigation("ClientModel");

                    b.Navigation("StandardModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectStandardModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.ProjectModel", "ProjectModel")
                        .WithMany("ProjectStandardModels")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_project_standard_project");

                    b.HasOne("idflApp.Core.Models.ProjectStandardCategoryModel", "ProjectStandardCategory")
                        .WithMany("ProjectStandardModels")
                        .HasForeignKey("ProjectStandardCategoryId")
                        .HasConstraintName("fk_project_standard_project_standard_category");

                    b.Navigation("ProjectModel");

                    b.Navigation("ProjectStandardCategory");
                });

            modelBuilder.Entity("idflApp.Core.Models.StandardAnswerModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.ProjectModel", "ProjectModel")
                        .WithMany("StandardAnswerModels")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_standard_answer_project");

                    b.Navigation("ProjectModel");
                });

            modelBuilder.Entity("idflApp.Core.Models.StandardQuestionModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.StandardModel", "StandardModel")
                        .WithMany("StandardQuestionModels")
                        .HasForeignKey("StandardId")
                        .HasConstraintName("fk_standard_question_standard");

                    b.Navigation("StandardModel");
                });

            modelBuilder.Entity("Core.Models.ClientModel", b =>
                {
                    b.Navigation("ProjectModels");
                });

            modelBuilder.Entity("idflApp.Core.Models.BookModel", b =>
                {
                    b.Navigation("BookUserModels");
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectModel", b =>
                {
                    b.Navigation("BookModels");

                    b.Navigation("ProjectGeneralModel");

                    b.Navigation("ProjectStandardModels");

                    b.Navigation("StandardAnswerModels");
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectStandardCategoryModel", b =>
                {
                    b.Navigation("ProjectStandardModels");
                });

            modelBuilder.Entity("idflApp.Core.Models.StandardModel", b =>
                {
                    b.Navigation("ProjectModels");

                    b.Navigation("StandardQuestionModels");
                });

            modelBuilder.Entity("idflApp.Core.Models.UserModel", b =>
                {
                    b.Navigation("BookModels");

                    b.Navigation("ProjectModels");
                });
#pragma warning restore 612, 618
        }
    }
}
