// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using idflApp.Data;

#nullable disable

namespace idflApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240312043130_add_refactor_user_book_table")]
    partial class add_refactor_user_book_table
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Models.ClientModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<int>("AccountRole")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActiveAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("BusinessLicenseFile")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("District")
                        .HasColumnType("longtext");

                    b.Property<string>("Dob")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FaxNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("IDCardNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsThirdParty")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Representator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RepresentatorTitle")
                        .HasColumnType("longtext");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Ward")
                        .HasColumnType("longtext");

                    b.Property<string>("Website")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("dbclient", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("faec6807-5fd5-44f7-8a76-a7e88dfe4515"),
                            AccountName = "client 1",
                            AccountNumber = 128743,
                            AccountRole = 0,
                            ActiveAt = new DateTime(2024, 3, 12, 11, 31, 30, 355, DateTimeKind.Local).AddTicks(8698),
                            Address = "TPHCM",
                            BusinessLicenseFile = "/uploads/docs/122BC4DD.pdf",
                            CompanyName = "CTy TNHH MTV SCC",
                            ContactPerson = "0982288888",
                            CreatedAt = new DateTime(2024, 3, 12, 11, 31, 30, 355, DateTimeKind.Local).AddTicks(8692),
                            District = "10",
                            Email = "client_1@gmail.com",
                            FaxNumber = "10099922",
                            IDCardNumber = "1235888570",
                            IsActive = true,
                            IsDeleted = false,
                            IsThirdParty = false,
                            IsVerified = true,
                            Password = "m9fUsQskgQAZZPVNkXc3ag==",
                            Phone = "0983373388",
                            Representator = "Client example",
                            RepresentatorTitle = "Director Manager",
                            TaxNumber = "12358799",
                            VerifiedAt = new DateTime(2024, 3, 12, 11, 31, 30, 355, DateTimeKind.Local).AddTicks(8700),
                            Ward = "5",
                            Website = "scc.com"
                        },
                        new
                        {
                            Id = new Guid("9cf262b7-d7e4-4a57-b0ed-0ce987c0e8ef"),
                            AccountName = "client 2",
                            AccountNumber = 123587,
                            AccountRole = 0,
                            ActiveAt = new DateTime(2024, 3, 12, 11, 31, 30, 356, DateTimeKind.Local).AddTicks(7950),
                            Address = "TPHCM",
                            BusinessLicenseFile = "/uploads/docs/122BC4DD.pdf",
                            CompanyName = "CTy TNHH MTV SCB",
                            ContactPerson = "0982288888",
                            CreatedAt = new DateTime(2024, 3, 12, 11, 31, 30, 356, DateTimeKind.Local).AddTicks(7948),
                            District = "10",
                            Email = "client_2@gmail.com",
                            FaxNumber = "10099922",
                            IDCardNumber = "1235888570",
                            IsActive = true,
                            IsDeleted = false,
                            IsThirdParty = true,
                            IsVerified = true,
                            Password = "m9fUsQskgQAZZPVNkXc3ag==",
                            Phone = "0983373388",
                            Representator = "Client example",
                            RepresentatorTitle = "Director Manager",
                            TaxNumber = "12358799",
                            VerifiedAt = new DateTime(2024, 3, 12, 11, 31, 30, 356, DateTimeKind.Local).AddTicks(7951),
                            Ward = "5",
                            Website = "scc.com"
                        });
                });

            modelBuilder.Entity("idflApp.Core.Models.BookModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AuditBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("BgColor")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("CompletedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CompletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CompletedNotes")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Occupancy")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SubTitle")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CompletedBy");

                    b.HasIndex("ProjectId");

                    b.ToTable("dbbooking", (string)null);
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectGeneralModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BannedCertificationDescription")
                        .HasColumnType("longtext");

                    b.Property<int?>("ClientNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeniedCertificationDescription")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsEmergency")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRushCertificate")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProjectCode")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ProjectName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("dbprojectgeneral", (string)null);
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CertificationBody")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CertificationExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("HandledBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("IdflCode")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsAnotherCertification")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsInitialCertification")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRenewalCertification")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IssueCertificated")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("IssueCertificatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LicenseNo")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("PayerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ProjectGeneralId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("StandardId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("HandledBy");

                    b.HasIndex("IdflCode")
                        .IsUnique();

                    b.HasIndex("StandardId");

                    b.ToTable("dbproject", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("352711f1-354c-4d65-ad43-934b71019fd5"),
                            CertificationBody = "Test",
                            CertificationExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ClientId = new Guid("faec6807-5fd5-44f7-8a76-a7e88dfe4515"),
                            CreatedAt = new DateTime(2024, 3, 12, 11, 31, 30, 356, DateTimeKind.Local).AddTicks(8240),
                            IdflCode = "223787XC",
                            IsAnotherCertification = true,
                            IsDeleted = false,
                            IsInitialCertification = true,
                            IsRenewalCertification = true,
                            IssueCertificated = false,
                            IssueCertificatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LicenseNo = "12233XYUC",
                            StandardId = new Guid("b93663f7-30a1-4154-ad03-6191c0c6006c"),
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("3b850aef-f30d-4128-a1fb-c13ee940bee9"),
                            CertificationBody = "certification 1",
                            CertificationExpirationDate = new DateTime(2024, 3, 12, 11, 31, 30, 356, DateTimeKind.Local).AddTicks(8244),
                            ClientId = new Guid("faec6807-5fd5-44f7-8a76-a7e88dfe4515"),
                            CreatedAt = new DateTime(2024, 3, 12, 11, 31, 30, 356, DateTimeKind.Local).AddTicks(8245),
                            IdflCode = "223407XC",
                            IsAnotherCertification = true,
                            IsDeleted = false,
                            IsInitialCertification = true,
                            IsRenewalCertification = false,
                            IssueCertificated = false,
                            IssueCertificatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LicenseNo = "12233XYUC",
                            StandardId = new Guid("b93663f7-30a1-4154-ad03-6191c0c6006c"),
                            Status = "Verified"
                        },
                        new
                        {
                            Id = new Guid("1ae71337-a62f-4eb8-8fc3-9947844a99b7"),
                            CertificationBody = "certification 2",
                            CertificationExpirationDate = new DateTime(2024, 3, 12, 11, 31, 30, 356, DateTimeKind.Local).AddTicks(8248),
                            ClientId = new Guid("faec6807-5fd5-44f7-8a76-a7e88dfe4515"),
                            CreatedAt = new DateTime(2024, 3, 12, 11, 31, 30, 356, DateTimeKind.Local).AddTicks(8250),
                            IdflCode = "223TTT010",
                            IsAnotherCertification = true,
                            IsDeleted = false,
                            IsInitialCertification = true,
                            IsRenewalCertification = false,
                            IssueCertificated = true,
                            IssueCertificatedDate = new DateTime(2024, 3, 12, 11, 31, 30, 356, DateTimeKind.Local).AddTicks(8249),
                            LicenseNo = "12233XYUC",
                            StandardId = new Guid("b93663f7-30a1-4154-ad03-6191c0c6006c"),
                            Status = "Certificated"
                        },
                        new
                        {
                            Id = new Guid("51e5ef79-f1e0-4859-a10b-95eb4510c73d"),
                            CertificationBody = "certification 3",
                            CertificationExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ClientId = new Guid("faec6807-5fd5-44f7-8a76-a7e88dfe4515"),
                            CreatedAt = new DateTime(2024, 3, 12, 11, 31, 30, 356, DateTimeKind.Local).AddTicks(8253),
                            IdflCode = "223TTT009",
                            IsAnotherCertification = true,
                            IsDeleted = false,
                            IsInitialCertification = true,
                            IsRenewalCertification = false,
                            IssueCertificated = false,
                            IssueCertificatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LicenseNo = "12233XYUC",
                            StandardId = new Guid("b93663f7-30a1-4154-ad03-6191c0c6006c"),
                            Status = "Approved"
                        });
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectStandardCategoryModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("ProjectStandardCategory");
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectStandardModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ProjectStandardCategoryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectStandardCategoryId");

                    b.ToTable("dbprojectstandard", (string)null);
                });

            modelBuilder.Entity("idflApp.Core.Models.StandardAnswerModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsYesNo")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Question")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("StandardQuestionId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("dbstandardanswer", (string)null);
                });

            modelBuilder.Entity("idflApp.Core.Models.StandardModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StandardCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("dbstandard", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b93663f7-30a1-4154-ad03-6191c0c6006c"),
                            CreatedAt = new DateTime(2024, 3, 12, 11, 31, 30, 356, DateTimeKind.Local).AddTicks(8057),
                            Description = "IDFL may not issue an OCS scope certificate to an organization which holds a GOTS scope certificate with another certification body, unless the GOTS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Organic Content Standard",
                            StandardCode = "OCS"
                        },
                        new
                        {
                            Id = new Guid("9d1c727a-3430-443a-978b-b7a329fe5106"),
                            CreatedAt = new DateTime(2024, 3, 12, 11, 31, 30, 356, DateTimeKind.Local).AddTicks(8075),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Responsible Animal Fiber",
                            StandardCode = "RAF"
                        },
                        new
                        {
                            Id = new Guid("dc6f10a4-32b9-429a-aa4b-59ef3949a8e4"),
                            CreatedAt = new DateTime(2024, 3, 12, 11, 31, 30, 356, DateTimeKind.Local).AddTicks(8076),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Tiêu Chuẩn Len Có Trách Nhiệm",
                            StandardCode = "RWS"
                        },
                        new
                        {
                            Id = new Guid("4d5a69a4-6492-491a-915f-b1f1f7a58b82"),
                            CreatedAt = new DateTime(2024, 3, 12, 11, 31, 30, 356, DateTimeKind.Local).AddTicks(8155),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Tiêu Chuẩn Mohair Có Trách Nhiệm",
                            StandardCode = "RMS"
                        },
                        new
                        {
                            Id = new Guid("c8d1d613-71ce-4499-adf9-a52696c93c82"),
                            CreatedAt = new DateTime(2024, 3, 12, 11, 31, 30, 356, DateTimeKind.Local).AddTicks(8157),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Tiêu Chuẩn Alpaca Có Trách Nhiệm",
                            StandardCode = "RAS"
                        },
                        new
                        {
                            Id = new Guid("ccbedc05-d8e2-4150-8485-72c16d496f2f"),
                            CreatedAt = new DateTime(2024, 3, 12, 11, 31, 30, 356, DateTimeKind.Local).AddTicks(8060),
                            Description = "IDFL may not issue a GOTS scope certificate to an organization which holds a OCS scope certificate with another certification body, unless the GOTS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Global Organic Textile Standard",
                            StandardCode = "GOTS"
                        },
                        new
                        {
                            Id = new Guid("e2e8bd7d-01e7-4d20-847d-ae49c824d80b"),
                            CreatedAt = new DateTime(2024, 3, 12, 11, 31, 30, 356, DateTimeKind.Local).AddTicks(8063),
                            Description = "IDFL may not issue a GRS scope certificate to an organization which holds a RCS scope certificate with another certification body, unless the RCS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Global Recycled Standard",
                            StandardCode = "GRS"
                        },
                        new
                        {
                            Id = new Guid("d9ff26c9-5168-4534-b5de-a000e4f30c04"),
                            CreatedAt = new DateTime(2024, 3, 12, 11, 31, 30, 356, DateTimeKind.Local).AddTicks(8071),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Recycled Claim Standard",
                            StandardCode = "RCS"
                        },
                        new
                        {
                            Id = new Guid("a1ea554c-9585-4981-92b2-61a2a0534f6e"),
                            CreatedAt = new DateTime(2024, 3, 12, 11, 31, 30, 356, DateTimeKind.Local).AddTicks(8073),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Responsible Down Standard",
                            StandardCode = "RDS"
                        });
                });

            modelBuilder.Entity("idflApp.Core.Models.StandardQuestionModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Question")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("StandardId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("StandardId");

                    b.ToTable("dbstandardquestion", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2f0f6fab-9564-46b8-b473-eea4340291d7"),
                            CreatedAt = new DateTime(2024, 3, 12, 11, 31, 30, 356, DateTimeKind.Local).AddTicks(8192),
                            IsActive = true,
                            Question = "Are there any subcontractor facilities that trade / handle / process certified products in this scope of certification? If so, please indicate by noting in the List of Activities / Processes",
                            StandardId = new Guid("b93663f7-30a1-4154-ad03-6191c0c6006c")
                        },
                        new
                        {
                            Id = new Guid("be2b9a90-5785-42f8-8df1-f985369368d6"),
                            CreatedAt = new DateTime(2024, 3, 12, 11, 31, 30, 356, DateTimeKind.Local).AddTicks(8195),
                            IsActive = true,
                            Question = "OEKO-TEX STEP Environmental Performance Requirements | Yêu cầu về Hiệu suất Môi trường của Oeko - Tex Step",
                            StandardId = new Guid("b93663f7-30a1-4154-ad03-6191c0c6006c")
                        },
                        new
                        {
                            Id = new Guid("420aeb0f-2440-4567-9f7b-93335203a425"),
                            CreatedAt = new DateTime(2024, 3, 12, 11, 31, 30, 356, DateTimeKind.Local).AddTicks(8200),
                            IsActive = true,
                            Question = "SCS Recycled Content Verification | Xác Minh Thành Phần Tái Chế SCS",
                            StandardId = new Guid("b93663f7-30a1-4154-ad03-6191c0c6006c")
                        });
                });

            modelBuilder.Entity("idflApp.Core.Models.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ActiveDateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("District")
                        .HasColumnType("longtext");

                    b.Property<string>("Dob")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Icon")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Roles")
                        .HasColumnType("int");

                    b.Property<string>("SubTitle")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("VerifiedDateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Ward")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("dbuser", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6877cf08-4b96-44cd-aa9e-4154021a7bad"),
                            AccountName = "Pham Anh Doan",
                            ActiveDateAt = new DateTime(2024, 3, 12, 11, 31, 30, 352, DateTimeKind.Local).AddTicks(9008),
                            CreatedAt = new DateTime(2024, 3, 12, 11, 31, 30, 352, DateTimeKind.Local).AddTicks(8988),
                            Email = "test_1@gmail.com",
                            Icon = "https://picsum.photos/24",
                            IsActive = true,
                            IsDeleted = false,
                            IsVerified = true,
                            Password = "m9fUsQskgQAZZPVNkXc3ag==",
                            Phone = "123587777",
                            Roles = 0,
                            Title = "Developer",
                            VerifiedDateAt = new DateTime(2024, 3, 12, 11, 31, 30, 352, DateTimeKind.Local).AddTicks(9009)
                        },
                        new
                        {
                            Id = new Guid("02d88ab8-b2a1-46c9-9f5f-22288b28418f"),
                            AccountName = "Pham Anh Teo",
                            ActiveDateAt = new DateTime(2024, 3, 12, 11, 31, 30, 353, DateTimeKind.Local).AddTicks(8644),
                            CreatedAt = new DateTime(2024, 3, 12, 11, 31, 30, 353, DateTimeKind.Local).AddTicks(8642),
                            Email = "test_2@gmail.com",
                            Icon = "https://picsum.photos/24",
                            IsActive = true,
                            IsDeleted = false,
                            IsVerified = true,
                            Password = "m9fUsQskgQAZZPVNkXc3ag==",
                            Phone = "123587777",
                            Roles = 1,
                            Title = "Auditor",
                            VerifiedDateAt = new DateTime(2024, 3, 12, 11, 31, 30, 353, DateTimeKind.Local).AddTicks(8645)
                        },
                        new
                        {
                            Id = new Guid("1637e1e7-d25c-4021-bd18-eb8dea60d389"),
                            AccountName = "Tran thanh sang",
                            ActiveDateAt = new DateTime(2024, 3, 12, 11, 31, 30, 354, DateTimeKind.Local).AddTicks(8554),
                            CreatedAt = new DateTime(2024, 3, 12, 11, 31, 30, 354, DateTimeKind.Local).AddTicks(8548),
                            Email = "test_3@gmail.com",
                            Icon = "https://picsum.photos/24",
                            IsActive = true,
                            IsDeleted = false,
                            IsVerified = true,
                            Password = "m9fUsQskgQAZZPVNkXc3ag==",
                            Phone = "123587777",
                            Roles = 1,
                            Title = "Auditor Supervisor",
                            VerifiedDateAt = new DateTime(2024, 3, 12, 11, 31, 30, 354, DateTimeKind.Local).AddTicks(8555)
                        });
                });

            modelBuilder.Entity("idflApp.Core.Models.BookModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.UserModel", "UserModel")
                        .WithMany("BookModels")
                        .HasForeignKey("CompletedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("idflApp.Core.Models.ProjectModel", "ProjectModel")
                        .WithMany("BookModels")
                        .HasForeignKey("ProjectId");

                    b.Navigation("ProjectModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectGeneralModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.ProjectModel", "ProjectModel")
                        .WithOne("ProjectGeneralModel")
                        .HasForeignKey("idflApp.Core.Models.ProjectGeneralModel", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_general_project");

                    b.Navigation("ProjectModel");
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectModel", b =>
                {
                    b.HasOne("Core.Models.ClientModel", "ClientModel")
                        .WithMany("ProjectModels")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_client");

                    b.HasOne("idflApp.Core.Models.UserModel", "UserModel")
                        .WithMany("ProjectModels")
                        .HasForeignKey("HandledBy")
                        .HasConstraintName("fk_project_user");

                    b.HasOne("idflApp.Core.Models.StandardModel", "StandardModel")
                        .WithMany("ProjectModels")
                        .HasForeignKey("StandardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_standard");

                    b.Navigation("ClientModel");

                    b.Navigation("StandardModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectStandardModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.ProjectModel", "ProjectModel")
                        .WithMany("ProjectStandardModels")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_project_standard_project");

                    b.HasOne("idflApp.Core.Models.ProjectStandardCategoryModel", "ProjectStandardCategory")
                        .WithMany("ProjectStandardModels")
                        .HasForeignKey("ProjectStandardCategoryId")
                        .HasConstraintName("fk_project_standard_project_standard_category");

                    b.Navigation("ProjectModel");

                    b.Navigation("ProjectStandardCategory");
                });

            modelBuilder.Entity("idflApp.Core.Models.StandardAnswerModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.ProjectModel", "ProjectModel")
                        .WithMany("StandardAnswerModels")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_standard_answer_project");

                    b.Navigation("ProjectModel");
                });

            modelBuilder.Entity("idflApp.Core.Models.StandardQuestionModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.StandardModel", "StandardModel")
                        .WithMany("StandardQuestionModels")
                        .HasForeignKey("StandardId")
                        .HasConstraintName("fk_standard_question_standard");

                    b.Navigation("StandardModel");
                });

            modelBuilder.Entity("Core.Models.ClientModel", b =>
                {
                    b.Navigation("ProjectModels");
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectModel", b =>
                {
                    b.Navigation("BookModels");

                    b.Navigation("ProjectGeneralModel");

                    b.Navigation("ProjectStandardModels");

                    b.Navigation("StandardAnswerModels");
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectStandardCategoryModel", b =>
                {
                    b.Navigation("ProjectStandardModels");
                });

            modelBuilder.Entity("idflApp.Core.Models.StandardModel", b =>
                {
                    b.Navigation("ProjectModels");

                    b.Navigation("StandardQuestionModels");
                });

            modelBuilder.Entity("idflApp.Core.Models.UserModel", b =>
                {
                    b.Navigation("BookModels");

                    b.Navigation("ProjectModels");
                });
#pragma warning restore 612, 618
        }
    }
}
