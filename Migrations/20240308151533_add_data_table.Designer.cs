// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using idflApp.Data;

#nullable disable

namespace idflApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240308151533_add_data_table")]
    partial class add_data_table
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Models.ClientModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<int>("AccountRole")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActiveAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("BusinessLicenseFile")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("District")
                        .HasColumnType("longtext");

                    b.Property<string>("Dob")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FaxNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("IDCardNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsThirdParty")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Representator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RepresentatorTitle")
                        .HasColumnType("longtext");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Ward")
                        .HasColumnType("longtext");

                    b.Property<string>("Website")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("dbclient", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("36c18ca7-abb9-41c7-8b71-64d9633ae99e"),
                            AccountName = "client 1",
                            AccountNumber = 128743,
                            AccountRole = 0,
                            ActiveAt = new DateTime(2024, 3, 8, 22, 15, 33, 556, DateTimeKind.Local).AddTicks(5309),
                            Address = "TPHCM",
                            BusinessLicenseFile = "/uploads/docs/122BC4DD.pdf",
                            CompanyName = "CTy TNHH MTV SCC",
                            ContactPerson = "0982288888",
                            CreatedAt = new DateTime(2024, 3, 8, 22, 15, 33, 556, DateTimeKind.Local).AddTicks(5308),
                            District = "10",
                            Email = "client_1@gmail.com",
                            FaxNumber = "10099922",
                            IDCardNumber = "1235888570",
                            IsActive = true,
                            IsDeleted = false,
                            IsThirdParty = false,
                            IsVerified = true,
                            Password = "m9fUsQskgQAZZPVNkXc3ag==",
                            Phone = "0983373388",
                            Representator = "Client example",
                            RepresentatorTitle = "Director Manager",
                            TaxNumber = "12358799",
                            VerifiedAt = new DateTime(2024, 3, 8, 22, 15, 33, 556, DateTimeKind.Local).AddTicks(5312),
                            Ward = "5",
                            Website = "scc.com"
                        },
                        new
                        {
                            Id = new Guid("d704fd02-fa40-4544-b8dd-c834d5f29d3e"),
                            AccountName = "client 2",
                            AccountNumber = 123587,
                            AccountRole = 0,
                            ActiveAt = new DateTime(2024, 3, 8, 22, 15, 33, 557, DateTimeKind.Local).AddTicks(3840),
                            Address = "TPHCM",
                            BusinessLicenseFile = "/uploads/docs/122BC4DD.pdf",
                            CompanyName = "CTy TNHH MTV SCB",
                            ContactPerson = "0982288888",
                            CreatedAt = new DateTime(2024, 3, 8, 22, 15, 33, 557, DateTimeKind.Local).AddTicks(3834),
                            District = "10",
                            Email = "client_2@gmail.com",
                            FaxNumber = "10099922",
                            IDCardNumber = "1235888570",
                            IsActive = true,
                            IsDeleted = false,
                            IsThirdParty = true,
                            IsVerified = true,
                            Password = "m9fUsQskgQAZZPVNkXc3ag==",
                            Phone = "0983373388",
                            Representator = "Client example",
                            RepresentatorTitle = "Director Manager",
                            TaxNumber = "12358799",
                            VerifiedAt = new DateTime(2024, 3, 8, 22, 15, 33, 557, DateTimeKind.Local).AddTicks(3841),
                            Ward = "5",
                            Website = "scc.com"
                        });
                });

            modelBuilder.Entity("idflApp.Core.Models.BookModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AuditBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CompletedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("CompletedNotes")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EndedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Purpose")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("dbbooking", (string)null);
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectGeneralModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BannedCertificationDescription")
                        .HasColumnType("longtext");

                    b.Property<int?>("ClientNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeniedCertificationDescription")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsEmergency")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRushCertificate")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProjectCode")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ProjectName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("dbprojectgeneral", (string)null);
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CertificationBody")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CertificationExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("HandledBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("IdflCode")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsAnotherCertification")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsInitialCertification")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRenewalCertification")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IssueCertificated")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("IssueCertificatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LicenseNo")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("PayerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ProjectGeneralId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("StandardId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("HandledBy");

                    b.HasIndex("IdflCode")
                        .IsUnique();

                    b.HasIndex("StandardId");

                    b.ToTable("dbproject", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0106382-fa3e-4b8b-bf89-ad0523555d28"),
                            CertificationBody = "Test",
                            CertificationExpirationDate = new DateTime(2024, 3, 8, 22, 15, 33, 557, DateTimeKind.Local).AddTicks(4022),
                            ClientId = new Guid("36c18ca7-abb9-41c7-8b71-64d9633ae99e"),
                            CreatedAt = new DateTime(2024, 3, 8, 22, 15, 33, 557, DateTimeKind.Local).AddTicks(4038),
                            IdflCode = "223787XC",
                            IsAnotherCertification = true,
                            IsDeleted = false,
                            IsInitialCertification = true,
                            IsRenewalCertification = true,
                            IssueCertificated = true,
                            IssueCertificatedDate = new DateTime(2024, 3, 8, 22, 15, 33, 557, DateTimeKind.Local).AddTicks(4037),
                            LicenseNo = "12233XYUC",
                            StandardId = new Guid("b456ab46-89f8-4ba3-b88b-e9fed6f4ca32"),
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("a7c9043b-ea33-443c-abfd-55e34b15a72e"),
                            CertificationBody = "certification 1",
                            CertificationExpirationDate = new DateTime(2024, 3, 8, 22, 15, 33, 557, DateTimeKind.Local).AddTicks(4076),
                            ClientId = new Guid("36c18ca7-abb9-41c7-8b71-64d9633ae99e"),
                            CreatedAt = new DateTime(2024, 3, 8, 22, 15, 33, 557, DateTimeKind.Local).AddTicks(4078),
                            IdflCode = "223487XC",
                            IsAnotherCertification = true,
                            IsDeleted = false,
                            IsInitialCertification = true,
                            IsRenewalCertification = false,
                            IssueCertificated = false,
                            IssueCertificatedDate = new DateTime(2024, 3, 8, 22, 15, 33, 557, DateTimeKind.Local).AddTicks(4077),
                            LicenseNo = "12233XYUC",
                            StandardId = new Guid("b456ab46-89f8-4ba3-b88b-e9fed6f4ca32"),
                            Status = "Verified"
                        },
                        new
                        {
                            Id = new Guid("580c6acb-1ce2-4e10-8c21-7de800a3ffe6"),
                            CertificationBody = "certification 2",
                            CertificationExpirationDate = new DateTime(2024, 3, 8, 22, 15, 33, 557, DateTimeKind.Local).AddTicks(4080),
                            ClientId = new Guid("36c18ca7-abb9-41c7-8b71-64d9633ae99e"),
                            CreatedAt = new DateTime(2024, 3, 8, 22, 15, 33, 557, DateTimeKind.Local).AddTicks(4081),
                            IdflCode = "223TTT009",
                            IsAnotherCertification = true,
                            IsDeleted = false,
                            IsInitialCertification = true,
                            IsRenewalCertification = false,
                            IssueCertificated = true,
                            IssueCertificatedDate = new DateTime(2024, 3, 8, 22, 15, 33, 557, DateTimeKind.Local).AddTicks(4081),
                            LicenseNo = "12233XYUC",
                            StandardId = new Guid("b456ab46-89f8-4ba3-b88b-e9fed6f4ca32"),
                            Status = "Completed"
                        });
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectStandardCategoryModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("ProjectStandardCategory");
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectStandardModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ProjectStandardCategoryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectStandardCategoryId");

                    b.ToTable("dbprojectstandard", (string)null);
                });

            modelBuilder.Entity("idflApp.Core.Models.StandardAnswerModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsYesNo")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Question")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("StandardQuestionId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("dbstandardanswer", (string)null);
                });

            modelBuilder.Entity("idflApp.Core.Models.StandardModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StandardCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("dbstandard", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b456ab46-89f8-4ba3-b88b-e9fed6f4ca32"),
                            CreatedAt = new DateTime(2024, 3, 8, 22, 15, 33, 557, DateTimeKind.Local).AddTicks(3945),
                            Description = "IDFL may not issue an OCS scope certificate to an organization which holds a GOTS scope certificate with another certification body, unless the GOTS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Organic Content Standard",
                            StandardCode = "OCS"
                        },
                        new
                        {
                            Id = new Guid("c9a2f250-2e10-44cb-9aef-8ac75723a958"),
                            CreatedAt = new DateTime(2024, 3, 8, 22, 15, 33, 557, DateTimeKind.Local).AddTicks(3958),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Responsible Animal Fiber",
                            StandardCode = "RAF"
                        },
                        new
                        {
                            Id = new Guid("245d58b9-6baf-44af-8649-4138af83b37c"),
                            CreatedAt = new DateTime(2024, 3, 8, 22, 15, 33, 557, DateTimeKind.Local).AddTicks(3960),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Tiêu Chuẩn Len Có Trách Nhiệm",
                            StandardCode = "RWS"
                        },
                        new
                        {
                            Id = new Guid("75eff706-8001-4ba4-bc40-2b2151680d2f"),
                            CreatedAt = new DateTime(2024, 3, 8, 22, 15, 33, 557, DateTimeKind.Local).AddTicks(3961),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Tiêu Chuẩn Mohair Có Trách Nhiệm",
                            StandardCode = "RMS"
                        },
                        new
                        {
                            Id = new Guid("e26b2fa4-55b9-4672-b0b6-189d165bde9f"),
                            CreatedAt = new DateTime(2024, 3, 8, 22, 15, 33, 557, DateTimeKind.Local).AddTicks(3963),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Tiêu Chuẩn Alpaca Có Trách Nhiệm",
                            StandardCode = "RAS"
                        },
                        new
                        {
                            Id = new Guid("6397bfea-d9a3-4b56-9bcc-86d520b38e51"),
                            CreatedAt = new DateTime(2024, 3, 8, 22, 15, 33, 557, DateTimeKind.Local).AddTicks(3947),
                            Description = "IDFL may not issue a GOTS scope certificate to an organization which holds a OCS scope certificate with another certification body, unless the GOTS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Global Organic Textile Standard",
                            StandardCode = "GOTS"
                        },
                        new
                        {
                            Id = new Guid("d97c83a4-aa24-46ea-aa8a-2349dcc4eb54"),
                            CreatedAt = new DateTime(2024, 3, 8, 22, 15, 33, 557, DateTimeKind.Local).AddTicks(3953),
                            Description = "IDFL may not issue a GRS scope certificate to an organization which holds a RCS scope certificate with another certification body, unless the RCS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Global Recycled Standard",
                            StandardCode = "GRS"
                        },
                        new
                        {
                            Id = new Guid("7c277fc7-ed9b-434b-bd4d-5cb1bfd7d5be"),
                            CreatedAt = new DateTime(2024, 3, 8, 22, 15, 33, 557, DateTimeKind.Local).AddTicks(3955),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Recycled Claim Standard",
                            StandardCode = "RCS"
                        },
                        new
                        {
                            Id = new Guid("c50b412b-4363-45ef-b881-61199aec3882"),
                            CreatedAt = new DateTime(2024, 3, 8, 22, 15, 33, 557, DateTimeKind.Local).AddTicks(3957),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Responsible Down Standard",
                            StandardCode = "RDS"
                        });
                });

            modelBuilder.Entity("idflApp.Core.Models.StandardQuestionModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Question")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("StandardId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("StandardId");

                    b.ToTable("dbstandardquestion", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9cabd458-c107-4205-8752-4742408b01ac"),
                            CreatedAt = new DateTime(2024, 3, 8, 22, 15, 33, 557, DateTimeKind.Local).AddTicks(3996),
                            IsActive = true,
                            Question = "Are there any subcontractor facilities that trade / handle / process certified products in this scope of certification? If so, please indicate by noting in the List of Activities / Processes",
                            StandardId = new Guid("b456ab46-89f8-4ba3-b88b-e9fed6f4ca32")
                        },
                        new
                        {
                            Id = new Guid("fd9fd505-7f2b-4243-89b1-6c1fab65ec3b"),
                            CreatedAt = new DateTime(2024, 3, 8, 22, 15, 33, 557, DateTimeKind.Local).AddTicks(4000),
                            IsActive = true,
                            Question = "OEKO-TEX STEP Environmental Performance Requirements | Yêu cầu về Hiệu suất Môi trường của Oeko - Tex Step",
                            StandardId = new Guid("b456ab46-89f8-4ba3-b88b-e9fed6f4ca32")
                        },
                        new
                        {
                            Id = new Guid("d85fb191-c7f6-4c1e-83c6-decf01363f87"),
                            CreatedAt = new DateTime(2024, 3, 8, 22, 15, 33, 557, DateTimeKind.Local).AddTicks(4002),
                            IsActive = true,
                            Question = "SCS Recycled Content Verification | Xác Minh Thành Phần Tái Chế SCS",
                            StandardId = new Guid("b456ab46-89f8-4ba3-b88b-e9fed6f4ca32")
                        });
                });

            modelBuilder.Entity("idflApp.Core.Models.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ActiveDateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("District")
                        .HasColumnType("longtext");

                    b.Property<string>("Dob")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Roles")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("VerifiedDateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Ward")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("dbuser", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8f9d93c2-1cee-47b6-89cc-d7d83e5eb346"),
                            AccountName = "Test 1",
                            ActiveDateAt = new DateTime(2024, 3, 8, 22, 15, 33, 555, DateTimeKind.Local).AddTicks(850),
                            CreatedAt = new DateTime(2024, 3, 8, 22, 15, 33, 555, DateTimeKind.Local).AddTicks(838),
                            Email = "test_1@gmail.com",
                            IsActive = true,
                            IsDeleted = false,
                            IsVerified = true,
                            Password = "m9fUsQskgQAZZPVNkXc3ag==",
                            Phone = "123587777",
                            Roles = 0,
                            VerifiedDateAt = new DateTime(2024, 3, 8, 22, 15, 33, 555, DateTimeKind.Local).AddTicks(850)
                        },
                        new
                        {
                            Id = new Guid("193290ee-672b-4c92-bb68-484cc3e1f028"),
                            AccountName = "Test 2",
                            ActiveDateAt = new DateTime(2024, 3, 8, 22, 15, 33, 555, DateTimeKind.Local).AddTicks(8017),
                            CreatedAt = new DateTime(2024, 3, 8, 22, 15, 33, 555, DateTimeKind.Local).AddTicks(8015),
                            Email = "test_2@gmail.com",
                            IsActive = true,
                            IsDeleted = false,
                            IsVerified = true,
                            Password = "m9fUsQskgQAZZPVNkXc3ag==",
                            Phone = "123587777",
                            Roles = 1,
                            VerifiedDateAt = new DateTime(2024, 3, 8, 22, 15, 33, 555, DateTimeKind.Local).AddTicks(8018)
                        });
                });

            modelBuilder.Entity("idflApp.Core.Models.BookModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.ProjectModel", "ProjectModel")
                        .WithMany("BookModels")
                        .HasForeignKey("ProjectId");

                    b.HasOne("idflApp.Core.Models.UserModel", "UserModel")
                        .WithMany("BookModels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectGeneralModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.ProjectModel", "ProjectModel")
                        .WithOne("ProjectGeneralModel")
                        .HasForeignKey("idflApp.Core.Models.ProjectGeneralModel", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_general_project");

                    b.Navigation("ProjectModel");
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectModel", b =>
                {
                    b.HasOne("Core.Models.ClientModel", "ClientModel")
                        .WithMany("ProjectModels")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_client");

                    b.HasOne("idflApp.Core.Models.UserModel", "UserModel")
                        .WithMany("ProjectModels")
                        .HasForeignKey("HandledBy")
                        .HasConstraintName("fk_project_user");

                    b.HasOne("idflApp.Core.Models.StandardModel", "StandardModel")
                        .WithMany("ProjectModels")
                        .HasForeignKey("StandardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_standard");

                    b.Navigation("ClientModel");

                    b.Navigation("StandardModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectStandardModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.ProjectModel", "ProjectModel")
                        .WithMany("ProjectStandardModels")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_project_standard_project");

                    b.HasOne("idflApp.Core.Models.ProjectStandardCategoryModel", "ProjectStandardCategory")
                        .WithMany("ProjectStandardModels")
                        .HasForeignKey("ProjectStandardCategoryId")
                        .HasConstraintName("fk_project_standard_project_standard_category");

                    b.Navigation("ProjectModel");

                    b.Navigation("ProjectStandardCategory");
                });

            modelBuilder.Entity("idflApp.Core.Models.StandardAnswerModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.ProjectModel", "ProjectModel")
                        .WithMany("StandardAnswerModels")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_standard_answer_project");

                    b.Navigation("ProjectModel");
                });

            modelBuilder.Entity("idflApp.Core.Models.StandardQuestionModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.StandardModel", "StandardModel")
                        .WithMany("StandardQuestionModels")
                        .HasForeignKey("StandardId")
                        .HasConstraintName("fk_standard_question_standard");

                    b.Navigation("StandardModel");
                });

            modelBuilder.Entity("Core.Models.ClientModel", b =>
                {
                    b.Navigation("ProjectModels");
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectModel", b =>
                {
                    b.Navigation("BookModels");

                    b.Navigation("ProjectGeneralModel");

                    b.Navigation("ProjectStandardModels");

                    b.Navigation("StandardAnswerModels");
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectStandardCategoryModel", b =>
                {
                    b.Navigation("ProjectStandardModels");
                });

            modelBuilder.Entity("idflApp.Core.Models.StandardModel", b =>
                {
                    b.Navigation("ProjectModels");

                    b.Navigation("StandardQuestionModels");
                });

            modelBuilder.Entity("idflApp.Core.Models.UserModel", b =>
                {
                    b.Navigation("BookModels");

                    b.Navigation("ProjectModels");
                });
#pragma warning restore 612, 618
        }
    }
}
