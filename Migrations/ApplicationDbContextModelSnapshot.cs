// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using idflApp.Data;

#nullable disable

namespace idflApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Models.ClientModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<int>("AccountRole")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActiveAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("BusinessLicenseFile")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("District")
                        .HasColumnType("longtext");

                    b.Property<string>("Dob")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FaxNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("IDCardNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsThirdParty")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Representator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RepresentatorTitle")
                        .HasColumnType("longtext");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Ward")
                        .HasColumnType("longtext");

                    b.Property<string>("Website")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("dbclient", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("47896a19-b739-4466-8c04-a15c421ff780"),
                            AccountName = "client 1",
                            AccountNumber = 128743,
                            AccountRole = 0,
                            ActiveAt = new DateTime(2024, 3, 6, 13, 35, 34, 740, DateTimeKind.Local).AddTicks(2708),
                            Address = "TPHCM",
                            BusinessLicenseFile = "/uploads/docs/122BC4DD.pdf",
                            CompanyName = "CTy TNHH MTV SCC",
                            ContactPerson = "0982288888",
                            CreatedAt = new DateTime(2024, 3, 6, 13, 35, 34, 740, DateTimeKind.Local).AddTicks(2706),
                            District = "10",
                            Email = "client_1@gmail.com",
                            FaxNumber = "10099922",
                            IDCardNumber = "1235888570",
                            IsActive = true,
                            IsDeleted = false,
                            IsThirdParty = false,
                            IsVerified = true,
                            Password = "m9fUsQskgQAZZPVNkXc3ag==",
                            Phone = "0983373388",
                            Representator = "Client example",
                            RepresentatorTitle = "Director Manager",
                            TaxNumber = "12358799",
                            VerifiedAt = new DateTime(2024, 3, 6, 13, 35, 34, 740, DateTimeKind.Local).AddTicks(2709),
                            Ward = "5",
                            Website = "scc.com"
                        },
                        new
                        {
                            Id = new Guid("f5e77044-f8bc-4031-b3b4-ed121afe1ff8"),
                            AccountName = "client 2",
                            AccountNumber = 123587,
                            AccountRole = 0,
                            ActiveAt = new DateTime(2024, 3, 6, 13, 35, 34, 741, DateTimeKind.Local).AddTicks(418),
                            Address = "TPHCM",
                            BusinessLicenseFile = "/uploads/docs/122BC4DD.pdf",
                            CompanyName = "CTy TNHH MTV SCB",
                            ContactPerson = "0982288888",
                            CreatedAt = new DateTime(2024, 3, 6, 13, 35, 34, 741, DateTimeKind.Local).AddTicks(414),
                            District = "10",
                            Email = "client_2@gmail.com",
                            FaxNumber = "10099922",
                            IDCardNumber = "1235888570",
                            IsActive = true,
                            IsDeleted = false,
                            IsThirdParty = true,
                            IsVerified = true,
                            Password = "m9fUsQskgQAZZPVNkXc3ag==",
                            Phone = "0983373388",
                            Representator = "Client example",
                            RepresentatorTitle = "Director Manager",
                            TaxNumber = "12358799",
                            VerifiedAt = new DateTime(2024, 3, 6, 13, 35, 34, 741, DateTimeKind.Local).AddTicks(419),
                            Ward = "5",
                            Website = "scc.com"
                        });
                });

            modelBuilder.Entity("idflApp.Core.Models.BookModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AuditBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("AuditedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CompletedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EndedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Subject")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("dbbooking", (string)null);
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectGeneralModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BannedCertificationDescription")
                        .HasColumnType("longtext");

                    b.Property<int?>("ClientNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeniedCertificationDescription")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsEmergency")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRushCertificate")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProjectCode")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ProjectName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("dbprojectgeneral", (string)null);
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("BookId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CertificationBody")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CertificationExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("HandledBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("IdflCode")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsAnotherCertification")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsInitialCertification")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRenewalCertification")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IssueCertificated")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("IssueCertificatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LicenseNo")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("PayerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ProjectGeneralId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("StandardId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("HandledBy");

                    b.HasIndex("IdflCode")
                        .IsUnique();

                    b.HasIndex("StandardId");

                    b.ToTable("dbproject", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("56163402-81f5-4730-82c7-57cc0835c394"),
                            CertificationBody = "Test",
                            CertificationExpirationDate = new DateTime(2024, 3, 6, 13, 35, 34, 741, DateTimeKind.Local).AddTicks(601),
                            ClientId = new Guid("47896a19-b739-4466-8c04-a15c421ff780"),
                            CreatedAt = new DateTime(2024, 3, 6, 13, 35, 34, 741, DateTimeKind.Local).AddTicks(617),
                            IdflCode = "223787XC",
                            IsAnotherCertification = true,
                            IsDeleted = false,
                            IsInitialCertification = true,
                            IsRenewalCertification = true,
                            IssueCertificated = true,
                            IssueCertificatedDate = new DateTime(2024, 3, 6, 13, 35, 34, 741, DateTimeKind.Local).AddTicks(617),
                            LicenseNo = "12233XYUC",
                            StandardId = new Guid("ae2f32cc-fad4-42df-87a8-656fe9bef995"),
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("f9e391ad-b392-4e54-8ae7-8af430f68cba"),
                            CertificationBody = "Test",
                            CertificationExpirationDate = new DateTime(2024, 3, 6, 13, 35, 34, 741, DateTimeKind.Local).AddTicks(620),
                            ClientId = new Guid("47896a19-b739-4466-8c04-a15c421ff780"),
                            CreatedAt = new DateTime(2024, 3, 6, 13, 35, 34, 741, DateTimeKind.Local).AddTicks(622),
                            IdflCode = "223487XC",
                            IsAnotherCertification = true,
                            IsDeleted = false,
                            IsInitialCertification = true,
                            IsRenewalCertification = false,
                            IssueCertificated = false,
                            IssueCertificatedDate = new DateTime(2024, 3, 6, 13, 35, 34, 741, DateTimeKind.Local).AddTicks(621),
                            LicenseNo = "12233XYUC",
                            StandardId = new Guid("ae2f32cc-fad4-42df-87a8-656fe9bef995"),
                            Status = "Verified"
                        },
                        new
                        {
                            Id = new Guid("26db5f41-d572-4193-bdb7-56ec5c2487a3"),
                            CertificationBody = "project_3",
                            CertificationExpirationDate = new DateTime(2024, 3, 6, 13, 35, 34, 741, DateTimeKind.Local).AddTicks(624),
                            ClientId = new Guid("47896a19-b739-4466-8c04-a15c421ff780"),
                            CreatedAt = new DateTime(2024, 3, 6, 13, 35, 34, 741, DateTimeKind.Local).AddTicks(625),
                            IdflCode = "223TTT009",
                            IsAnotherCertification = true,
                            IsDeleted = false,
                            IsInitialCertification = true,
                            IsRenewalCertification = false,
                            IssueCertificated = true,
                            IssueCertificatedDate = new DateTime(2024, 3, 6, 13, 35, 34, 741, DateTimeKind.Local).AddTicks(625),
                            LicenseNo = "12233XYUC",
                            StandardId = new Guid("ae2f32cc-fad4-42df-87a8-656fe9bef995"),
                            Status = "Completed"
                        });
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectStandardCategoryModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("ProjectStandardCategory");
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectStandardModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ProjectStandardCategoryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectStandardCategoryId");

                    b.ToTable("dbprojectstandard", (string)null);
                });

            modelBuilder.Entity("idflApp.Core.Models.StandardAnswerModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsYesNo")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Question")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("StandardQuestionId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("dbstandardanswer", (string)null);
                });

            modelBuilder.Entity("idflApp.Core.Models.StandardModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StandardCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("dbstandard", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ae2f32cc-fad4-42df-87a8-656fe9bef995"),
                            CreatedAt = new DateTime(2024, 3, 6, 13, 35, 34, 741, DateTimeKind.Local).AddTicks(530),
                            Description = "IDFL may not issue an OCS scope certificate to an organization which holds a GOTS scope certificate with another certification body, unless the GOTS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Organic Content Standard",
                            StandardCode = "OCS"
                        },
                        new
                        {
                            Id = new Guid("d0294ed1-5534-4e1a-8090-bf5dfb7dedcf"),
                            CreatedAt = new DateTime(2024, 3, 6, 13, 35, 34, 741, DateTimeKind.Local).AddTicks(540),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Responsible Animal Fiber",
                            StandardCode = "RAF"
                        },
                        new
                        {
                            Id = new Guid("b44382e1-d93e-4cd8-afe7-6d26adfeb392"),
                            CreatedAt = new DateTime(2024, 3, 6, 13, 35, 34, 741, DateTimeKind.Local).AddTicks(542),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Tiêu Chuẩn Len Có Trách Nhiệm",
                            StandardCode = "RWS"
                        },
                        new
                        {
                            Id = new Guid("9345e936-9d53-4793-bf3d-d0c7a36f7fc3"),
                            CreatedAt = new DateTime(2024, 3, 6, 13, 35, 34, 741, DateTimeKind.Local).AddTicks(546),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Tiêu Chuẩn Mohair Có Trách Nhiệm",
                            StandardCode = "RMS"
                        },
                        new
                        {
                            Id = new Guid("628501b9-2821-4469-8f48-c527421d8e20"),
                            CreatedAt = new DateTime(2024, 3, 6, 13, 35, 34, 741, DateTimeKind.Local).AddTicks(548),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Tiêu Chuẩn Alpaca Có Trách Nhiệm",
                            StandardCode = "RAS"
                        },
                        new
                        {
                            Id = new Guid("2ccf6ef9-e06f-484c-a51c-fd9e67975118"),
                            CreatedAt = new DateTime(2024, 3, 6, 13, 35, 34, 741, DateTimeKind.Local).AddTicks(533),
                            Description = "IDFL may not issue a GOTS scope certificate to an organization which holds a OCS scope certificate with another certification body, unless the GOTS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Global Organic Textile Standard",
                            StandardCode = "GOTS"
                        },
                        new
                        {
                            Id = new Guid("96370b7b-ecfb-40f2-b4bd-db86a87dee17"),
                            CreatedAt = new DateTime(2024, 3, 6, 13, 35, 34, 741, DateTimeKind.Local).AddTicks(535),
                            Description = "IDFL may not issue a GRS scope certificate to an organization which holds a RCS scope certificate with another certification body, unless the RCS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Global Recycled Standard",
                            StandardCode = "GRS"
                        },
                        new
                        {
                            Id = new Guid("eabb4ac6-3c38-4d7b-a618-da739f109d1e"),
                            CreatedAt = new DateTime(2024, 3, 6, 13, 35, 34, 741, DateTimeKind.Local).AddTicks(537),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Recycled Claim Standard",
                            StandardCode = "RCS"
                        },
                        new
                        {
                            Id = new Guid("ed944e61-dbca-43b9-bba2-b1a9298f2505"),
                            CreatedAt = new DateTime(2024, 3, 6, 13, 35, 34, 741, DateTimeKind.Local).AddTicks(539),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Responsible Down Standard",
                            StandardCode = "RDS"
                        });
                });

            modelBuilder.Entity("idflApp.Core.Models.StandardQuestionModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Question")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("StandardId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("StandardId");

                    b.ToTable("dbstandardquestion", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a46c609-ee0d-4960-96b3-0ccaeb111b65"),
                            CreatedAt = new DateTime(2024, 3, 6, 13, 35, 34, 741, DateTimeKind.Local).AddTicks(574),
                            IsActive = true,
                            Question = "Are there any subcontractor facilities that trade / handle / process certified products in this scope of certification? If so, please indicate by noting in the List of Activities / Processes",
                            StandardId = new Guid("ae2f32cc-fad4-42df-87a8-656fe9bef995")
                        },
                        new
                        {
                            Id = new Guid("fb43f8ef-850c-4c79-94bf-515426377a4d"),
                            CreatedAt = new DateTime(2024, 3, 6, 13, 35, 34, 741, DateTimeKind.Local).AddTicks(577),
                            IsActive = true,
                            Question = "OEKO-TEX STEP Environmental Performance Requirements | Yêu cầu về Hiệu suất Môi trường của Oeko - Tex Step",
                            StandardId = new Guid("ae2f32cc-fad4-42df-87a8-656fe9bef995")
                        },
                        new
                        {
                            Id = new Guid("899f415b-6db2-407d-bedf-025ade556ca5"),
                            CreatedAt = new DateTime(2024, 3, 6, 13, 35, 34, 741, DateTimeKind.Local).AddTicks(579),
                            IsActive = true,
                            Question = "SCS Recycled Content Verification | Xác Minh Thành Phần Tái Chế SCS",
                            StandardId = new Guid("ae2f32cc-fad4-42df-87a8-656fe9bef995")
                        });
                });

            modelBuilder.Entity("idflApp.Core.Models.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ActiveDateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("District")
                        .HasColumnType("longtext");

                    b.Property<string>("Dob")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Roles")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("VerifiedDateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Ward")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("dbuser", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9757b502-b82c-4558-8cd2-66e86c41f63b"),
                            AccountName = "Test 1",
                            ActiveDateAt = new DateTime(2024, 3, 6, 13, 35, 34, 738, DateTimeKind.Local).AddTicks(8267),
                            CreatedAt = new DateTime(2024, 3, 6, 13, 35, 34, 738, DateTimeKind.Local).AddTicks(8254),
                            Email = "test_1@gmail.com",
                            IsActive = true,
                            IsDeleted = false,
                            IsVerified = true,
                            Password = "m9fUsQskgQAZZPVNkXc3ag==",
                            Phone = "123587777",
                            Roles = 0,
                            VerifiedDateAt = new DateTime(2024, 3, 6, 13, 35, 34, 738, DateTimeKind.Local).AddTicks(8270)
                        },
                        new
                        {
                            Id = new Guid("9a455c0a-f149-43ac-81a8-2f71975b4c7d"),
                            AccountName = "Test 1",
                            ActiveDateAt = new DateTime(2024, 3, 6, 13, 35, 34, 739, DateTimeKind.Local).AddTicks(5459),
                            CreatedAt = new DateTime(2024, 3, 6, 13, 35, 34, 739, DateTimeKind.Local).AddTicks(5457),
                            Email = "test_2@gmail.com",
                            IsActive = true,
                            IsDeleted = false,
                            IsVerified = true,
                            Password = "m9fUsQskgQAZZPVNkXc3ag==",
                            Phone = "123587777",
                            Roles = 1,
                            VerifiedDateAt = new DateTime(2024, 3, 6, 13, 35, 34, 739, DateTimeKind.Local).AddTicks(5460)
                        });
                });

            modelBuilder.Entity("idflApp.Core.Models.BookModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.ProjectModel", "ProjectModel")
                        .WithOne("BookModel")
                        .HasForeignKey("idflApp.Core.Models.BookModel", "ProjectId");

                    b.HasOne("idflApp.Core.Models.UserModel", "UserModel")
                        .WithMany("BookModels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectGeneralModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.ProjectModel", "ProjectModel")
                        .WithOne("ProjectGeneralModel")
                        .HasForeignKey("idflApp.Core.Models.ProjectGeneralModel", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_general_project");

                    b.Navigation("ProjectModel");
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectModel", b =>
                {
                    b.HasOne("Core.Models.ClientModel", "ClientModel")
                        .WithMany("ProjectModels")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_client");

                    b.HasOne("idflApp.Core.Models.UserModel", "UserModel")
                        .WithMany("ProjectModels")
                        .HasForeignKey("HandledBy")
                        .HasConstraintName("fk_project_user");

                    b.HasOne("idflApp.Core.Models.StandardModel", "StandardModel")
                        .WithMany("ProjectModels")
                        .HasForeignKey("StandardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_standard");

                    b.Navigation("ClientModel");

                    b.Navigation("StandardModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectStandardModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.ProjectModel", "ProjectModel")
                        .WithMany("ProjectStandardModels")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_project_standard_project");

                    b.HasOne("idflApp.Core.Models.ProjectStandardCategoryModel", "ProjectStandardCategory")
                        .WithMany("ProjectStandardModels")
                        .HasForeignKey("ProjectStandardCategoryId")
                        .HasConstraintName("fk_project_standard_project_standard_category");

                    b.Navigation("ProjectModel");

                    b.Navigation("ProjectStandardCategory");
                });

            modelBuilder.Entity("idflApp.Core.Models.StandardAnswerModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.ProjectModel", "ProjectModel")
                        .WithMany("StandardAnswerModels")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_standard_answer_project");

                    b.Navigation("ProjectModel");
                });

            modelBuilder.Entity("idflApp.Core.Models.StandardQuestionModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.StandardModel", "StandardModel")
                        .WithMany("StandardQuestionModels")
                        .HasForeignKey("StandardId")
                        .HasConstraintName("fk_standard_question_standard");

                    b.Navigation("StandardModel");
                });

            modelBuilder.Entity("Core.Models.ClientModel", b =>
                {
                    b.Navigation("ProjectModels");
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectModel", b =>
                {
                    b.Navigation("BookModel");

                    b.Navigation("ProjectGeneralModel");

                    b.Navigation("ProjectStandardModels");

                    b.Navigation("StandardAnswerModels");
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectStandardCategoryModel", b =>
                {
                    b.Navigation("ProjectStandardModels");
                });

            modelBuilder.Entity("idflApp.Core.Models.StandardModel", b =>
                {
                    b.Navigation("ProjectModels");

                    b.Navigation("StandardQuestionModels");
                });

            modelBuilder.Entity("idflApp.Core.Models.UserModel", b =>
                {
                    b.Navigation("BookModels");

                    b.Navigation("ProjectModels");
                });
#pragma warning restore 612, 618
        }
    }
}
