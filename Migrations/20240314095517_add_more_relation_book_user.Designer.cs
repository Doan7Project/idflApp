// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using idflApp.Data;

#nullable disable

namespace idflApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240314095517_add_more_relation_book_user")]
    partial class add_more_relation_book_user
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Models.ClientModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<int>("AccountRole")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActiveAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("BusinessLicenseFile")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("District")
                        .HasColumnType("longtext");

                    b.Property<string>("Dob")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FaxNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("IDCardNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsThirdParty")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Representator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RepresentatorTitle")
                        .HasColumnType("longtext");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Ward")
                        .HasColumnType("longtext");

                    b.Property<string>("Website")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("dbclient", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a735124-2eaa-4567-98f4-0bffe2a0cda4"),
                            AccountName = "client 1",
                            AccountNumber = 128743,
                            AccountRole = 0,
                            ActiveAt = new DateTime(2024, 3, 14, 16, 55, 17, 567, DateTimeKind.Local).AddTicks(6208),
                            Address = "TPHCM",
                            BusinessLicenseFile = "/uploads/docs/122BC4DD.pdf",
                            CompanyName = "CTy TNHH MTV SCC",
                            ContactPerson = "0982288888",
                            CreatedAt = new DateTime(2024, 3, 14, 16, 55, 17, 567, DateTimeKind.Local).AddTicks(6208),
                            District = "10",
                            Email = "client_1@gmail.com",
                            FaxNumber = "10099922",
                            IDCardNumber = "1235888570",
                            IsActive = true,
                            IsDeleted = false,
                            IsThirdParty = false,
                            IsVerified = true,
                            Password = "m9fUsQskgQAZZPVNkXc3ag==",
                            Phone = "0983373388",
                            Representator = "Client example",
                            RepresentatorTitle = "Director Manager",
                            TaxNumber = "12358799",
                            VerifiedAt = new DateTime(2024, 3, 14, 16, 55, 17, 567, DateTimeKind.Local).AddTicks(6209),
                            Ward = "5",
                            Website = "scc.com"
                        },
                        new
                        {
                            Id = new Guid("cafe2325-8400-4efc-bda5-61b3bb5d061b"),
                            AccountName = "client 2",
                            AccountNumber = 123587,
                            AccountRole = 0,
                            ActiveAt = new DateTime(2024, 3, 14, 16, 55, 17, 568, DateTimeKind.Local).AddTicks(2999),
                            Address = "TPHCM",
                            BusinessLicenseFile = "/uploads/docs/122BC4DD.pdf",
                            CompanyName = "CTy TNHH MTV SCB",
                            ContactPerson = "0982288888",
                            CreatedAt = new DateTime(2024, 3, 14, 16, 55, 17, 568, DateTimeKind.Local).AddTicks(2998),
                            District = "10",
                            Email = "client_2@gmail.com",
                            FaxNumber = "10099922",
                            IDCardNumber = "1235888570",
                            IsActive = true,
                            IsDeleted = false,
                            IsThirdParty = true,
                            IsVerified = true,
                            Password = "m9fUsQskgQAZZPVNkXc3ag==",
                            Phone = "0983373388",
                            Representator = "Client example",
                            RepresentatorTitle = "Director Manager",
                            TaxNumber = "12358799",
                            VerifiedAt = new DateTime(2024, 3, 14, 16, 55, 17, 568, DateTimeKind.Local).AddTicks(3000),
                            Ward = "5",
                            Website = "scc.com"
                        });
                });

            modelBuilder.Entity("idflApp.Core.Models.BookModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BgColor")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("CompletedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CompletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CompletedNotes")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Occupancy")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SubTitle")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CompletedBy");

                    b.HasIndex("ProjectId");

                    b.ToTable("dbbooking", (string)null);
                });

            modelBuilder.Entity("idflApp.Core.Models.BookUserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AuditorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AuditorId");

                    b.HasIndex("BookId");

                    b.ToTable("dbbookuser", (string)null);
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectGeneralModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BannedCertificationDescription")
                        .HasColumnType("longtext");

                    b.Property<int?>("ClientNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeniedCertificationDescription")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsEmergency")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRushCertificate")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProjectCode")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ProjectName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("dbprojectgeneral", (string)null);
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CertificationBody")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CertificationExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("HandledBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("IdflCode")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsAnotherCertification")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsInitialCertification")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRenewalCertification")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IssueCertificated")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("IssueCertificatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LicenseNo")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("PayerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ProjectGeneralId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("StandardId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("HandledBy");

                    b.HasIndex("IdflCode")
                        .IsUnique();

                    b.HasIndex("StandardId");

                    b.ToTable("dbproject", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("51ce1a80-cad2-48a5-b971-4ad73cef3a27"),
                            CertificationBody = "Test",
                            CertificationExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ClientId = new Guid("4a735124-2eaa-4567-98f4-0bffe2a0cda4"),
                            CreatedAt = new DateTime(2024, 3, 14, 16, 55, 17, 568, DateTimeKind.Local).AddTicks(3117),
                            IdflCode = "223787XC",
                            IsAnotherCertification = true,
                            IsDeleted = false,
                            IsInitialCertification = true,
                            IsRenewalCertification = true,
                            IssueCertificated = false,
                            IssueCertificatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LicenseNo = "12233XYUC",
                            StandardId = new Guid("29c43274-df4a-43f1-a064-f8efaf0d01a5"),
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("75c45c16-8bc5-4ef1-8fff-e0b77402d0c8"),
                            CertificationBody = "certification 1",
                            CertificationExpirationDate = new DateTime(2024, 3, 14, 16, 55, 17, 568, DateTimeKind.Local).AddTicks(3120),
                            ClientId = new Guid("4a735124-2eaa-4567-98f4-0bffe2a0cda4"),
                            CreatedAt = new DateTime(2024, 3, 14, 16, 55, 17, 568, DateTimeKind.Local).AddTicks(3121),
                            IdflCode = "223407XC",
                            IsAnotherCertification = true,
                            IsDeleted = false,
                            IsInitialCertification = true,
                            IsRenewalCertification = false,
                            IssueCertificated = false,
                            IssueCertificatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LicenseNo = "12233XYUC",
                            StandardId = new Guid("29c43274-df4a-43f1-a064-f8efaf0d01a5"),
                            Status = "Verified"
                        },
                        new
                        {
                            Id = new Guid("9b99e73c-1e12-48cf-a3e2-639d8bdf1bdd"),
                            CertificationBody = "certification 2",
                            CertificationExpirationDate = new DateTime(2024, 3, 14, 16, 55, 17, 568, DateTimeKind.Local).AddTicks(3123),
                            ClientId = new Guid("4a735124-2eaa-4567-98f4-0bffe2a0cda4"),
                            CreatedAt = new DateTime(2024, 3, 14, 16, 55, 17, 568, DateTimeKind.Local).AddTicks(3125),
                            IdflCode = "223TTT010",
                            IsAnotherCertification = true,
                            IsDeleted = false,
                            IsInitialCertification = true,
                            IsRenewalCertification = false,
                            IssueCertificated = true,
                            IssueCertificatedDate = new DateTime(2024, 3, 14, 16, 55, 17, 568, DateTimeKind.Local).AddTicks(3124),
                            LicenseNo = "12233XYUC",
                            StandardId = new Guid("29c43274-df4a-43f1-a064-f8efaf0d01a5"),
                            Status = "Certificated"
                        },
                        new
                        {
                            Id = new Guid("830ae23a-567d-4db1-bbc3-278727c20d39"),
                            CertificationBody = "certification 3",
                            CertificationExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ClientId = new Guid("4a735124-2eaa-4567-98f4-0bffe2a0cda4"),
                            CreatedAt = new DateTime(2024, 3, 14, 16, 55, 17, 568, DateTimeKind.Local).AddTicks(3129),
                            IdflCode = "223TTT009",
                            IsAnotherCertification = true,
                            IsDeleted = false,
                            IsInitialCertification = true,
                            IsRenewalCertification = false,
                            IssueCertificated = false,
                            IssueCertificatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LicenseNo = "12233XYUC",
                            StandardId = new Guid("29c43274-df4a-43f1-a064-f8efaf0d01a5"),
                            Status = "Approved"
                        });
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectStandardCategoryModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("ProjectStandardCategory");
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectStandardModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ProjectStandardCategoryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectStandardCategoryId");

                    b.ToTable("dbprojectstandard", (string)null);
                });

            modelBuilder.Entity("idflApp.Core.Models.StandardAnswerModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsYesNo")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Question")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("StandardQuestionId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("dbstandardanswer", (string)null);
                });

            modelBuilder.Entity("idflApp.Core.Models.StandardModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StandardCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("dbstandard", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("29c43274-df4a-43f1-a064-f8efaf0d01a5"),
                            CreatedAt = new DateTime(2024, 3, 14, 16, 55, 17, 568, DateTimeKind.Local).AddTicks(3029),
                            Description = "IDFL may not issue an OCS scope certificate to an organization which holds a GOTS scope certificate with another certification body, unless the GOTS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Organic Content Standard",
                            StandardCode = "OCS"
                        },
                        new
                        {
                            Id = new Guid("281f8d38-063b-4805-8298-736d2e7d333d"),
                            CreatedAt = new DateTime(2024, 3, 14, 16, 55, 17, 568, DateTimeKind.Local).AddTicks(3038),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Responsible Animal Fiber",
                            StandardCode = "RAF"
                        },
                        new
                        {
                            Id = new Guid("a3178844-d33b-47b2-bd4e-14c0ea852749"),
                            CreatedAt = new DateTime(2024, 3, 14, 16, 55, 17, 568, DateTimeKind.Local).AddTicks(3039),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Tiêu Chuẩn Len Có Trách Nhiệm",
                            StandardCode = "RWS"
                        },
                        new
                        {
                            Id = new Guid("0d50ac6f-87d2-4560-b82f-b09f0c0f6123"),
                            CreatedAt = new DateTime(2024, 3, 14, 16, 55, 17, 568, DateTimeKind.Local).AddTicks(3043),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Tiêu Chuẩn Mohair Có Trách Nhiệm",
                            StandardCode = "RMS"
                        },
                        new
                        {
                            Id = new Guid("d6feb4e9-45bf-40f8-93bc-c8aec6460684"),
                            CreatedAt = new DateTime(2024, 3, 14, 16, 55, 17, 568, DateTimeKind.Local).AddTicks(3045),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Tiêu Chuẩn Alpaca Có Trách Nhiệm",
                            StandardCode = "RAS"
                        },
                        new
                        {
                            Id = new Guid("3bce5c66-c742-4af8-9866-ca5bd0384c95"),
                            CreatedAt = new DateTime(2024, 3, 14, 16, 55, 17, 568, DateTimeKind.Local).AddTicks(3031),
                            Description = "IDFL may not issue a GOTS scope certificate to an organization which holds a OCS scope certificate with another certification body, unless the GOTS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Global Organic Textile Standard",
                            StandardCode = "GOTS"
                        },
                        new
                        {
                            Id = new Guid("20094066-dd29-412b-8aab-9237ef79ca72"),
                            CreatedAt = new DateTime(2024, 3, 14, 16, 55, 17, 568, DateTimeKind.Local).AddTicks(3033),
                            Description = "IDFL may not issue a GRS scope certificate to an organization which holds a RCS scope certificate with another certification body, unless the RCS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Global Recycled Standard",
                            StandardCode = "GRS"
                        },
                        new
                        {
                            Id = new Guid("e4e59734-62b8-455b-aca8-84cacf3ca980"),
                            CreatedAt = new DateTime(2024, 3, 14, 16, 55, 17, 568, DateTimeKind.Local).AddTicks(3035),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Recycled Claim Standard",
                            StandardCode = "RCS"
                        },
                        new
                        {
                            Id = new Guid("f521b970-4674-44a9-8f82-8dbe5cd4f7fe"),
                            CreatedAt = new DateTime(2024, 3, 14, 16, 55, 17, 568, DateTimeKind.Local).AddTicks(3036),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Responsible Down Standard",
                            StandardCode = "RDS"
                        });
                });

            modelBuilder.Entity("idflApp.Core.Models.StandardQuestionModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Question")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("StandardId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("StandardId");

                    b.ToTable("dbstandardquestion", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("93347d80-43a0-4072-85d1-56a3138fc952"),
                            CreatedAt = new DateTime(2024, 3, 14, 16, 55, 17, 568, DateTimeKind.Local).AddTicks(3069),
                            IsActive = true,
                            Question = "Are there any subcontractor facilities that trade / handle / process certified products in this scope of certification? If so, please indicate by noting in the List of Activities / Processes",
                            StandardId = new Guid("29c43274-df4a-43f1-a064-f8efaf0d01a5")
                        },
                        new
                        {
                            Id = new Guid("00b0d938-a5a2-4056-962f-95b94a8e19c9"),
                            CreatedAt = new DateTime(2024, 3, 14, 16, 55, 17, 568, DateTimeKind.Local).AddTicks(3073),
                            IsActive = true,
                            Question = "OEKO-TEX STEP Environmental Performance Requirements | Yêu cầu về Hiệu suất Môi trường của Oeko - Tex Step",
                            StandardId = new Guid("29c43274-df4a-43f1-a064-f8efaf0d01a5")
                        },
                        new
                        {
                            Id = new Guid("0353506c-3b77-42c4-abf7-1df9e2a24616"),
                            CreatedAt = new DateTime(2024, 3, 14, 16, 55, 17, 568, DateTimeKind.Local).AddTicks(3074),
                            IsActive = true,
                            Question = "SCS Recycled Content Verification | Xác Minh Thành Phần Tái Chế SCS",
                            StandardId = new Guid("29c43274-df4a-43f1-a064-f8efaf0d01a5")
                        });
                });

            modelBuilder.Entity("idflApp.Core.Models.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ActiveDateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("District")
                        .HasColumnType("longtext");

                    b.Property<string>("Dob")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Icon")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Roles")
                        .HasColumnType("int");

                    b.Property<string>("SubTitle")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("VerifiedDateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Ward")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("dbuser", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8c3b7104-2842-46d9-86a3-836d0b724640"),
                            AccountName = "Pham Anh Doan",
                            ActiveDateAt = new DateTime(2024, 3, 14, 16, 55, 17, 565, DateTimeKind.Local).AddTicks(5793),
                            CreatedAt = new DateTime(2024, 3, 14, 16, 55, 17, 565, DateTimeKind.Local).AddTicks(5777),
                            Email = "test_1@gmail.com",
                            Icon = "https://picsum.photos/24",
                            IsActive = true,
                            IsDeleted = false,
                            IsVerified = true,
                            Password = "m9fUsQskgQAZZPVNkXc3ag==",
                            Phone = "123587777",
                            Roles = 0,
                            Title = "Developer",
                            VerifiedDateAt = new DateTime(2024, 3, 14, 16, 55, 17, 565, DateTimeKind.Local).AddTicks(5797)
                        },
                        new
                        {
                            Id = new Guid("7bd6c441-9558-4180-b0b7-2b8245bbc7f6"),
                            AccountName = "Pham Anh Teo",
                            ActiveDateAt = new DateTime(2024, 3, 14, 16, 55, 17, 566, DateTimeKind.Local).AddTicks(2582),
                            CreatedAt = new DateTime(2024, 3, 14, 16, 55, 17, 566, DateTimeKind.Local).AddTicks(2581),
                            Email = "test_2@gmail.com",
                            Icon = "https://picsum.photos/24",
                            IsActive = true,
                            IsDeleted = false,
                            IsVerified = true,
                            Password = "m9fUsQskgQAZZPVNkXc3ag==",
                            Phone = "123587777",
                            Roles = 1,
                            Title = "Auditor",
                            VerifiedDateAt = new DateTime(2024, 3, 14, 16, 55, 17, 566, DateTimeKind.Local).AddTicks(2582)
                        },
                        new
                        {
                            Id = new Guid("9aba2d39-8acf-41c3-9dee-109ca8b15e48"),
                            AccountName = "Tran thanh sang",
                            ActiveDateAt = new DateTime(2024, 3, 14, 16, 55, 17, 566, DateTimeKind.Local).AddTicks(9360),
                            CreatedAt = new DateTime(2024, 3, 14, 16, 55, 17, 566, DateTimeKind.Local).AddTicks(9359),
                            Email = "test_3@gmail.com",
                            Icon = "https://picsum.photos/24",
                            IsActive = true,
                            IsDeleted = false,
                            IsVerified = true,
                            Password = "m9fUsQskgQAZZPVNkXc3ag==",
                            Phone = "123587777",
                            Roles = 1,
                            Title = "Auditor Supervisor",
                            VerifiedDateAt = new DateTime(2024, 3, 14, 16, 55, 17, 566, DateTimeKind.Local).AddTicks(9361)
                        });
                });

            modelBuilder.Entity("idflApp.Core.Models.BookModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.UserModel", "UserModel")
                        .WithMany("BookModels")
                        .HasForeignKey("CompletedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("idflApp.Core.Models.ProjectModel", "ProjectModel")
                        .WithMany("BookModels")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ProjectModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("idflApp.Core.Models.BookUserModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.UserModel", "UserModel")
                        .WithMany("BookUserModels")
                        .HasForeignKey("AuditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_user_table_user");

                    b.HasOne("idflApp.Core.Models.BookModel", "BookModel")
                        .WithMany("BookUserModels")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_user_table_book");

                    b.Navigation("BookModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectGeneralModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.ProjectModel", "ProjectModel")
                        .WithOne("ProjectGeneralModel")
                        .HasForeignKey("idflApp.Core.Models.ProjectGeneralModel", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_general_project");

                    b.Navigation("ProjectModel");
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectModel", b =>
                {
                    b.HasOne("Core.Models.ClientModel", "ClientModel")
                        .WithMany("ProjectModels")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_client");

                    b.HasOne("idflApp.Core.Models.UserModel", "UserModel")
                        .WithMany("ProjectModels")
                        .HasForeignKey("HandledBy")
                        .HasConstraintName("fk_project_user");

                    b.HasOne("idflApp.Core.Models.StandardModel", "StandardModel")
                        .WithMany("ProjectModels")
                        .HasForeignKey("StandardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_standard");

                    b.Navigation("ClientModel");

                    b.Navigation("StandardModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectStandardModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.ProjectModel", "ProjectModel")
                        .WithMany("ProjectStandardModels")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_project_standard_project");

                    b.HasOne("idflApp.Core.Models.ProjectStandardCategoryModel", "ProjectStandardCategory")
                        .WithMany("ProjectStandardModels")
                        .HasForeignKey("ProjectStandardCategoryId")
                        .HasConstraintName("fk_project_standard_project_standard_category");

                    b.Navigation("ProjectModel");

                    b.Navigation("ProjectStandardCategory");
                });

            modelBuilder.Entity("idflApp.Core.Models.StandardAnswerModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.ProjectModel", "ProjectModel")
                        .WithMany("StandardAnswerModels")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_standard_answer_project");

                    b.Navigation("ProjectModel");
                });

            modelBuilder.Entity("idflApp.Core.Models.StandardQuestionModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.StandardModel", "StandardModel")
                        .WithMany("StandardQuestionModels")
                        .HasForeignKey("StandardId")
                        .HasConstraintName("fk_standard_question_standard");

                    b.Navigation("StandardModel");
                });

            modelBuilder.Entity("Core.Models.ClientModel", b =>
                {
                    b.Navigation("ProjectModels");
                });

            modelBuilder.Entity("idflApp.Core.Models.BookModel", b =>
                {
                    b.Navigation("BookUserModels");
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectModel", b =>
                {
                    b.Navigation("BookModels");

                    b.Navigation("ProjectGeneralModel");

                    b.Navigation("ProjectStandardModels");

                    b.Navigation("StandardAnswerModels");
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectStandardCategoryModel", b =>
                {
                    b.Navigation("ProjectStandardModels");
                });

            modelBuilder.Entity("idflApp.Core.Models.StandardModel", b =>
                {
                    b.Navigation("ProjectModels");

                    b.Navigation("StandardQuestionModels");
                });

            modelBuilder.Entity("idflApp.Core.Models.UserModel", b =>
                {
                    b.Navigation("BookModels");

                    b.Navigation("BookUserModels");

                    b.Navigation("ProjectModels");
                });
#pragma warning restore 612, 618
        }
    }
}
