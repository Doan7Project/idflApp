// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using idflApp.Data;

#nullable disable

namespace idflApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240316114645_add_refactor_database")]
    partial class add_refactor_database
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("idflApp.Core.Models.AccountVerifyModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ClientModelId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UserModelId")
                        .HasColumnType("char(36)");

                    b.Property<double>("VerifyCode")
                        .HasColumnType("double");

                    b.Property<int>("VerifyCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientModelId");

                    b.HasIndex("UserModelId");

                    b.ToTable("dbaccountverify", (string)null);
                });

            modelBuilder.Entity("idflApp.Core.Models.BookCompleteModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookModelId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CompletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UserModelId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("BookModelId");

                    b.HasIndex("UserModelId");

                    b.ToTable("dbbookcomplete", (string)null);
                });

            modelBuilder.Entity("idflApp.Core.Models.BookModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BgColor")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CompletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CompletedNotes")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("FactoryId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Occupancy")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SubTitle")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.ToTable("dbbooking", (string)null);
                });

            modelBuilder.Entity("idflApp.Core.Models.BookUserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AuditorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AuditorId");

                    b.HasIndex("BookId");

                    b.ToTable("dbbookuser", (string)null);
                });

            modelBuilder.Entity("idflApp.Core.Models.ClientInfomationModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeskPhone")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("dbclientinformation", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("eb1e90cf-758d-4129-a077-8072e91261bb"),
                            Address = "123 Main St",
                            City = "New York",
                            ClientId = new Guid("54295843-e8fb-4e79-81b5-57939411eb2d"),
                            CompanyName = "Client1 Company",
                            ContactPerson = "Alice Smith",
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 3, 16, 18, 46, 45, 685, DateTimeKind.Local).AddTicks(6161),
                            DeskPhone = "987-654-3210",
                            Dob = new DateTime(1985, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "123-456-7890",
                            Title = "CEO"
                        },
                        new
                        {
                            Id = new Guid("bd4acbd1-5399-49b4-83cc-db9bb304a1c9"),
                            Address = "456 Oak St",
                            City = "Los Angeles",
                            ClientId = new Guid("1615e262-4630-4963-818f-5bb8df8be61f"),
                            CompanyName = "Client2 Corporation",
                            ContactPerson = "Bob Johnson",
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 3, 16, 18, 46, 45, 685, DateTimeKind.Local).AddTicks(6165),
                            DeskPhone = "123-456-7890",
                            Dob = new DateTime(1978, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "987-654-3210",
                            Title = "Director"
                        },
                        new
                        {
                            Id = new Guid("e8bce232-d77d-4809-9462-702e0e6244f3"),
                            Address = "789 Maple Ave",
                            City = "Chicago",
                            ClientId = new Guid("c66df42b-0850-4e6f-9c69-2216b38d3560"),
                            CompanyName = "Client3 Enterprises",
                            ContactPerson = "Emily Davis",
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 3, 16, 18, 46, 45, 685, DateTimeKind.Local).AddTicks(6169),
                            DeskPhone = "444-555-6666",
                            Dob = new DateTime(1982, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "111-222-3333",
                            Title = "Manager"
                        },
                        new
                        {
                            Id = new Guid("14ad10a7-2783-4d32-9a03-62de4531291f"),
                            Address = "1010 Pine St",
                            City = "Houston",
                            ClientId = new Guid("ed1ba434-35e9-48bd-936f-e33dc3c755aa"),
                            CompanyName = "Client4 Ltd.",
                            ContactPerson = "Michael Brown",
                            Country = "USA",
                            DeskPhone = "555-666-7777",
                            Dob = new DateTime(1975, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "222-333-4444",
                            Title = "CEO"
                        },
                        new
                        {
                            Id = new Guid("ec383b84-baef-489a-854d-54cd78caaaad"),
                            Address = "789 Market St",
                            City = "San Francisco",
                            ClientId = new Guid("9bb6884e-1fa6-4d38-ae1b-77d70eab8134"),
                            CompanyName = "Client5 Solutions",
                            ContactPerson = "Sarah Adams",
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 3, 16, 18, 46, 45, 685, DateTimeKind.Local).AddTicks(6175),
                            DeskPhone = "666-777-8888",
                            Dob = new DateTime(1988, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "333-444-5555",
                            Title = "Director"
                        });
                });

            modelBuilder.Entity("idflApp.Core.Models.ClientModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("ClientCode")
                        .HasColumnType("int");

                    b.Property<int>("ClientRole")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsThirdParty")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("dbclient", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("54295843-e8fb-4e79-81b5-57939411eb2d"),
                            ClientCode = 1001,
                            ClientRole = 0,
                            CreatedAt = new DateTime(2024, 3, 16, 18, 46, 45, 682, DateTimeKind.Local).AddTicks(3688),
                            DisplayName = "Client1 Company",
                            Email = "alice@example.com",
                            IsActive = true,
                            IsThirdParty = false,
                            IsVerified = true,
                            Password = "m9fUsQskgQAZZPVNkXc3ag==",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("1615e262-4630-4963-818f-5bb8df8be61f"),
                            ClientCode = 1002,
                            ClientRole = 1,
                            CreatedAt = new DateTime(2024, 3, 16, 18, 46, 45, 683, DateTimeKind.Local).AddTicks(1258),
                            DisplayName = "Client2 Corporation",
                            Email = "bob@example.com",
                            IsActive = true,
                            IsThirdParty = false,
                            IsVerified = true,
                            Password = "m9fUsQskgQAZZPVNkXc3ag==",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("c66df42b-0850-4e6f-9c69-2216b38d3560"),
                            ClientCode = 1003,
                            ClientRole = 0,
                            CreatedAt = new DateTime(2024, 3, 16, 18, 46, 45, 683, DateTimeKind.Local).AddTicks(8984),
                            DisplayName = "Client3 Enterprises",
                            Email = "emily@example.com",
                            IsActive = true,
                            IsThirdParty = false,
                            IsVerified = true,
                            Password = "m9fUsQskgQAZZPVNkXc3ag==",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("ed1ba434-35e9-48bd-936f-e33dc3c755aa"),
                            ClientCode = 1004,
                            ClientRole = 1,
                            DisplayName = "Client4 Ltd.",
                            Email = "michael@example.com",
                            IsActive = true,
                            IsThirdParty = false,
                            IsVerified = true,
                            Password = "m9fUsQskgQAZZPVNkXc3ag==",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("9bb6884e-1fa6-4d38-ae1b-77d70eab8134"),
                            ClientCode = 1005,
                            ClientRole = 1,
                            CreatedAt = new DateTime(2024, 3, 16, 18, 46, 45, 685, DateTimeKind.Local).AddTicks(6092),
                            DisplayName = "Client5 Solutions",
                            Email = "sarah@example.com",
                            IsActive = true,
                            IsThirdParty = false,
                            IsVerified = true,
                            Password = "m9fUsQskgQAZZPVNkXc3ag==",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("idflApp.Core.Models.DepartmentModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("DepartmentModel");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d22ebe93-42ae-4a93-ad54-5e597d46ed56"),
                            CreatedAt = new DateTime(2024, 3, 16, 18, 46, 45, 678, DateTimeKind.Local).AddTicks(4967),
                            DepartmentName = "CS department",
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("d9b3099d-b7ee-4e57-a3b8-eca1547f622c"),
                            CreatedAt = new DateTime(2024, 3, 16, 18, 46, 45, 678, DateTimeKind.Local).AddTicks(4983),
                            DepartmentName = "Audit department",
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book",
                            Status = true
                        });
                });

            modelBuilder.Entity("idflApp.Core.Models.FactoryModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ActivitiesList")
                        .HasColumnType("longtext");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("District")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsCertificatePreviously")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Occupancies")
                        .HasColumnType("longtext");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UnitName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Ward")
                        .HasColumnType("longtext");

                    b.Property<string>("ZipCode")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("dbfactory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ea4cfe84-1e71-44ba-824f-d23c4de8f07c"),
                            ActivitiesList = "Production, Assembly",
                            Address = "123 Industrial St",
                            City = "City X",
                            Country = "Country Y",
                            District = "District A",
                            IsCertificatePreviously = false,
                            Occupancies = "Manufacturing",
                            ProjectId = new Guid("ff1439d6-f1ba-482b-a0ae-74b32bcf01ee"),
                            UnitName = "Factory A",
                            Ward = "Ward 1",
                            ZipCode = "12345"
                        },
                        new
                        {
                            Id = new Guid("31404a91-b21e-41df-bea2-be09b77c24cb"),
                            ActivitiesList = "Packaging, Sorting",
                            Address = "456 Commercial St",
                            City = "City Y",
                            Country = "Country Z",
                            District = "District B",
                            IsCertificatePreviously = true,
                            Occupancies = "Processing",
                            ProjectId = new Guid("ff1439d6-f1ba-482b-a0ae-74b32bcf01ee"),
                            UnitName = "Factory B",
                            Ward = "Ward 2",
                            ZipCode = "54321"
                        },
                        new
                        {
                            Id = new Guid("ac4268c0-f63e-4e4f-9a14-30cda7647746"),
                            ActivitiesList = "Cutting, Welding",
                            Address = "789 Business St",
                            City = "City Z",
                            Country = "Country X",
                            District = "District C",
                            IsCertificatePreviously = false,
                            Occupancies = "Fabrication",
                            ProjectId = new Guid("a6ddc50a-ad89-4fc9-bd36-6ec3bd7af726"),
                            UnitName = "Factory C",
                            Ward = "Ward 3",
                            ZipCode = "67890"
                        },
                        new
                        {
                            Id = new Guid("64afb8f6-55ae-46f0-a72d-a3a4719bc174"),
                            ActivitiesList = "Assembling, Testing",
                            Address = "101 Residential St",
                            City = "City W",
                            Country = "Country V",
                            District = "District D",
                            IsCertificatePreviously = true,
                            Occupancies = "Assembly",
                            ProjectId = new Guid("a3f22a8c-0eb0-4e15-97e5-73b8b45d451a"),
                            UnitName = "Factory D",
                            Ward = "Ward 4",
                            ZipCode = "98765"
                        },
                        new
                        {
                            Id = new Guid("238d18c0-9cd0-4861-a858-2e272dc7a5c6"),
                            ActivitiesList = "Machining, Finishing",
                            Address = "111 Avenue St",
                            City = "City V",
                            Country = "Country U",
                            District = "District E",
                            IsCertificatePreviously = false,
                            Occupancies = "Production",
                            ProjectId = new Guid("ff1439d6-f1ba-482b-a0ae-74b32bcf01ee"),
                            UnitName = "Factory E",
                            Ward = "Ward 5",
                            ZipCode = "13579"
                        });
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CertificationBody")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CertificationExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CertificationNumber")
                        .HasColumnType("longtext");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("IssueCertificatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RefCode")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("StandardId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("RefCode")
                        .IsUnique();

                    b.HasIndex("StandardId");

                    b.HasIndex("UserId");

                    b.ToTable("dbproject", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ff1439d6-f1ba-482b-a0ae-74b32bcf01ee"),
                            CertificationBody = "Certification Authority",
                            CertificationExpirationDate = new DateTime(2025, 3, 16, 18, 46, 45, 685, DateTimeKind.Local).AddTicks(6323),
                            CertificationNumber = "CERT123",
                            ClientId = new Guid("1615e262-4630-4963-818f-5bb8df8be61f"),
                            CreatedAt = new DateTime(2024, 3, 16, 18, 46, 45, 685, DateTimeKind.Local).AddTicks(6329),
                            IssueCertificatedDate = new DateTime(2024, 3, 16, 18, 46, 45, 685, DateTimeKind.Local).AddTicks(6322),
                            RefCode = "PROJ001",
                            StandardId = new Guid("9aae728c-be2a-4033-9c50-31ae91158ae1"),
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("a6ddc50a-ad89-4fc9-bd36-6ec3bd7af726"),
                            CertificationBody = "Certification Authority",
                            CertificationExpirationDate = new DateTime(2025, 3, 16, 18, 46, 45, 685, DateTimeKind.Local).AddTicks(6334),
                            CertificationNumber = "CERT456",
                            ClientId = new Guid("54295843-e8fb-4e79-81b5-57939411eb2d"),
                            CreatedAt = new DateTime(2024, 3, 16, 18, 46, 45, 685, DateTimeKind.Local).AddTicks(6335),
                            IssueCertificatedDate = new DateTime(2024, 3, 16, 18, 46, 45, 685, DateTimeKind.Local).AddTicks(6333),
                            RefCode = "PROJ002",
                            StandardId = new Guid("d614df29-44de-465e-b99b-8402cfbd1c4e"),
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a3f22a8c-0eb0-4e15-97e5-73b8b45d451a"),
                            CertificationBody = "Certification Authority",
                            CertificationExpirationDate = new DateTime(2025, 3, 16, 18, 46, 45, 685, DateTimeKind.Local).AddTicks(6340),
                            CertificationNumber = "CERT789",
                            ClientId = new Guid("54295843-e8fb-4e79-81b5-57939411eb2d"),
                            CreatedAt = new DateTime(2024, 3, 16, 18, 46, 45, 685, DateTimeKind.Local).AddTicks(6341),
                            IssueCertificatedDate = new DateTime(2024, 3, 16, 18, 46, 45, 685, DateTimeKind.Local).AddTicks(6339),
                            RefCode = "PROJ003",
                            StandardId = new Guid("336fc67b-e2a6-4f34-84a6-bad2bb3abc7e"),
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("685d7299-d83a-4609-bcec-071b8a050f6a"),
                            CertificationBody = "Certification Authority",
                            CertificationExpirationDate = new DateTime(2025, 3, 16, 18, 46, 45, 685, DateTimeKind.Local).AddTicks(6344),
                            CertificationNumber = "CERT101",
                            ClientId = new Guid("1615e262-4630-4963-818f-5bb8df8be61f"),
                            CreatedAt = new DateTime(2024, 3, 16, 18, 46, 45, 685, DateTimeKind.Local).AddTicks(6345),
                            IssueCertificatedDate = new DateTime(2024, 3, 16, 18, 46, 45, 685, DateTimeKind.Local).AddTicks(6343),
                            RefCode = "PROJ004",
                            StandardId = new Guid("9aae728c-be2a-4033-9c50-31ae91158ae1"),
                            Status = "Pending"
                        });
                });

            modelBuilder.Entity("idflApp.Core.Models.StandardModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Displayname")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("StandardCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("dbstandard", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9aae728c-be2a-4033-9c50-31ae91158ae1"),
                            CreatedAt = new DateTime(2024, 3, 16, 18, 46, 45, 685, DateTimeKind.Local).AddTicks(6234),
                            Description = "IDFL may not issue an OCS scope certificate to an organization which holds a GOTS scope certificate with another certification body, unless the GOTS scope certificate is in the process of being transferred to IDFL.",
                            Displayname = "Organic Content Standard",
                            IsActive = true,
                            StandardCode = "OCS"
                        },
                        new
                        {
                            Id = new Guid("603f275f-beab-4eb9-ad9c-a5d4eae3d8a6"),
                            CreatedAt = new DateTime(2024, 3, 16, 18, 46, 45, 685, DateTimeKind.Local).AddTicks(6289),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            Displayname = "Responsible Animal Fiber",
                            IsActive = true,
                            StandardCode = "RAF"
                        },
                        new
                        {
                            Id = new Guid("5d2a551a-de3d-4566-82a0-ffb33f7d0302"),
                            CreatedAt = new DateTime(2024, 3, 16, 18, 46, 45, 685, DateTimeKind.Local).AddTicks(6291),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            Displayname = "Tiêu Chuẩn Len Có Trách Nhiệm",
                            IsActive = true,
                            StandardCode = "RWS"
                        },
                        new
                        {
                            Id = new Guid("a9a503f2-e23f-4c3f-9484-8f62303a81cd"),
                            CreatedAt = new DateTime(2024, 3, 16, 18, 46, 45, 685, DateTimeKind.Local).AddTicks(6293),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            Displayname = "Tiêu Chuẩn Mohair Có Trách Nhiệm",
                            IsActive = true,
                            StandardCode = "RMS"
                        },
                        new
                        {
                            Id = new Guid("d614df29-44de-465e-b99b-8402cfbd1c4e"),
                            CreatedAt = new DateTime(2024, 3, 16, 18, 46, 45, 685, DateTimeKind.Local).AddTicks(6295),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            Displayname = "Tiêu Chuẩn Alpaca Có Trách Nhiệm",
                            IsActive = true,
                            StandardCode = "RAS"
                        },
                        new
                        {
                            Id = new Guid("336fc67b-e2a6-4f34-84a6-bad2bb3abc7e"),
                            CreatedAt = new DateTime(2024, 3, 16, 18, 46, 45, 685, DateTimeKind.Local).AddTicks(6279),
                            Description = "IDFL may not issue a GOTS scope certificate to an organization which holds a OCS scope certificate with another certification body, unless the GOTS scope certificate is in the process of being transferred to IDFL.",
                            Displayname = "Global Organic Textile Standard",
                            IsActive = true,
                            StandardCode = "GOTS"
                        },
                        new
                        {
                            Id = new Guid("bb9ea653-6d37-4cf6-977e-3dd98f2f594c"),
                            CreatedAt = new DateTime(2024, 3, 16, 18, 46, 45, 685, DateTimeKind.Local).AddTicks(6281),
                            Description = "IDFL may not issue a GRS scope certificate to an organization which holds a RCS scope certificate with another certification body, unless the RCS scope certificate is in the process of being transferred to IDFL.",
                            Displayname = "Global Recycled Standard",
                            IsActive = true,
                            StandardCode = "GRS"
                        },
                        new
                        {
                            Id = new Guid("4e6b07e6-fc73-4931-a594-5c13d8c9ff20"),
                            CreatedAt = new DateTime(2024, 3, 16, 18, 46, 45, 685, DateTimeKind.Local).AddTicks(6285),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            Displayname = "Recycled Claim Standard",
                            IsActive = true,
                            StandardCode = "RCS"
                        },
                        new
                        {
                            Id = new Guid("36764bf4-f76f-4b99-a973-6b03f9754543"),
                            CreatedAt = new DateTime(2024, 3, 16, 18, 46, 45, 685, DateTimeKind.Local).AddTicks(6287),
                            Description = "IDFL may not issue an RCS scope certificate to an organization which holds a GRS scope certificate with another certification body, unless the GRS scope certificate is in the process of being transferred to IDFL.",
                            Displayname = "Responsible Down Standard",
                            IsActive = true,
                            StandardCode = "RDS"
                        });
                });

            modelBuilder.Entity("idflApp.Core.Models.UserInformationModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Icon")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("dbuserinformation", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ab760805-7074-408e-851b-229a117cb76a"),
                            Address = "123 Main St",
                            City = "New York",
                            Dob = new DateTime(1994, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "123-456-7890",
                            Title = "Software Engineer",
                            UserId = new Guid("f714d440-35d8-48c3-ba87-2c6fdbff28bf")
                        },
                        new
                        {
                            Id = new Guid("9b50d418-5b72-446f-9e17-876dfb9a5659"),
                            Address = "456 Oak St",
                            City = "Los Angeles",
                            Dob = new DateTime(1980, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "987-654-3210",
                            Title = "Sales Manager",
                            UserId = new Guid("3fb8c7f9-e96c-412b-ac25-92980e89274c")
                        },
                        new
                        {
                            Id = new Guid("cf6ed099-b04e-4a61-b866-6711bbbc504f"),
                            Address = "789 Maple Ave",
                            City = "Chicago",
                            Dob = new DateTime(1975, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "111-222-3333",
                            Title = "HR Manager",
                            UserId = new Guid("ee85baa4-3073-4089-912d-593b94cbbe73")
                        },
                        new
                        {
                            Id = new Guid("c42fc78d-8993-4831-b0e8-41f432fa0099"),
                            Address = "1010 Pine St",
                            City = "San Francisco",
                            CreatedAt = new DateTime(2024, 3, 16, 18, 46, 45, 681, DateTimeKind.Local).AddTicks(6061),
                            Dob = new DateTime(1988, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "444-555-6666",
                            Title = "IT Manager",
                            UserId = new Guid("684c02da-f46d-45c0-9bf5-6bb716102a2e")
                        });
                });

            modelBuilder.Entity("idflApp.Core.Models.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("dbuser", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f714d440-35d8-48c3-ba87-2c6fdbff28bf"),
                            CreatedAt = new DateTime(2024, 3, 16, 18, 46, 45, 679, DateTimeKind.Local).AddTicks(3164),
                            DepartmentId = new Guid("d9b3099d-b7ee-4e57-a3b8-eca1547f622c"),
                            DisplayName = "Tom Arrict",
                            Email = "john.doe@example.com",
                            IsActive = true,
                            IsVerified = true,
                            Password = "m9fUsQskgQAZZPVNkXc3ag==",
                            Status = true,
                            UserCode = "user001",
                            UserRole = 0
                        },
                        new
                        {
                            Id = new Guid("3fb8c7f9-e96c-412b-ac25-92980e89274c"),
                            CreatedAt = new DateTime(2024, 3, 16, 18, 46, 45, 680, DateTimeKind.Local).AddTicks(739),
                            DepartmentId = new Guid("d9b3099d-b7ee-4e57-a3b8-eca1547f622c"),
                            DisplayName = "Alice Smith",
                            Email = "alice.smith@example.com",
                            IsActive = true,
                            IsVerified = true,
                            Password = "m9fUsQskgQAZZPVNkXc3ag==",
                            Status = true,
                            UserCode = "user002",
                            UserRole = 0
                        },
                        new
                        {
                            Id = new Guid("ee85baa4-3073-4089-912d-593b94cbbe73"),
                            CreatedAt = new DateTime(2024, 3, 16, 18, 46, 45, 680, DateTimeKind.Local).AddTicks(8353),
                            DepartmentId = new Guid("d22ebe93-42ae-4a93-ad54-5e597d46ed56"),
                            DisplayName = "Emily Johnson",
                            Email = "emily.johnson@example.com",
                            IsActive = true,
                            IsVerified = true,
                            Password = "m9fUsQskgQAZZPVNkXc3ag==",
                            Status = true,
                            UserCode = "user003",
                            UserRole = 1
                        },
                        new
                        {
                            Id = new Guid("684c02da-f46d-45c0-9bf5-6bb716102a2e"),
                            CreatedAt = new DateTime(2024, 3, 16, 18, 46, 45, 681, DateTimeKind.Local).AddTicks(5981),
                            DepartmentId = new Guid("d22ebe93-42ae-4a93-ad54-5e597d46ed56"),
                            DisplayName = "Michael Brown",
                            Email = "michael.brown@example.com",
                            IsActive = true,
                            IsVerified = true,
                            Password = "m9fUsQskgQAZZPVNkXc3ag==",
                            Status = true,
                            UserCode = "user006",
                            UserRole = 0
                        });
                });

            modelBuilder.Entity("idflApp.Core.Models.AccountVerifyModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.ClientModel", "ClientModel")
                        .WithMany("AccountVerifyModels")
                        .HasForeignKey("ClientModelId");

                    b.HasOne("idflApp.Core.Models.UserModel", "UserModel")
                        .WithMany("AccountVerifyModels")
                        .HasForeignKey("UserModelId");

                    b.Navigation("ClientModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("idflApp.Core.Models.BookCompleteModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.BookModel", "BookModel")
                        .WithMany("BookCompleteModels")
                        .HasForeignKey("BookModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("idflApp.Core.Models.UserModel", "UserModel")
                        .WithMany("BookCompleteModels")
                        .HasForeignKey("UserModelId");

                    b.Navigation("BookModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("idflApp.Core.Models.BookModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.FactoryModel", "FactoryModel")
                        .WithMany("BookModels")
                        .HasForeignKey("FactoryId");

                    b.Navigation("FactoryModel");
                });

            modelBuilder.Entity("idflApp.Core.Models.BookUserModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.UserModel", "UserModel")
                        .WithMany("BookUserModels")
                        .HasForeignKey("AuditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_user_table_user");

                    b.HasOne("idflApp.Core.Models.BookModel", "BookModel")
                        .WithMany("BookUserModels")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_user_table_book");

                    b.Navigation("BookModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("idflApp.Core.Models.ClientInfomationModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.ClientModel", "ClientModel")
                        .WithMany("ClientInfomationModels")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientModel");
                });

            modelBuilder.Entity("idflApp.Core.Models.FactoryModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.ProjectModel", "ProjectModel")
                        .WithMany("FactoryModels")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectModel");
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.ClientModel", "ClientModel")
                        .WithMany("ProjectModels")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("idflApp.Core.Models.StandardModel", "StandardModel")
                        .WithMany("ProjectModels")
                        .HasForeignKey("StandardId");

                    b.HasOne("idflApp.Core.Models.UserModel", "UserModel")
                        .WithMany("ProjectModels")
                        .HasForeignKey("UserId");

                    b.Navigation("ClientModel");

                    b.Navigation("StandardModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("idflApp.Core.Models.UserInformationModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.UserModel", "UserModel")
                        .WithMany("UserInformationModels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("idflApp.Core.Models.UserModel", b =>
                {
                    b.HasOne("idflApp.Core.Models.DepartmentModel", "DepartmentModel")
                        .WithMany("UserModels")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepartmentModel");
                });

            modelBuilder.Entity("idflApp.Core.Models.BookModel", b =>
                {
                    b.Navigation("BookCompleteModels");

                    b.Navigation("BookUserModels");
                });

            modelBuilder.Entity("idflApp.Core.Models.ClientModel", b =>
                {
                    b.Navigation("AccountVerifyModels");

                    b.Navigation("ClientInfomationModels");

                    b.Navigation("ProjectModels");
                });

            modelBuilder.Entity("idflApp.Core.Models.DepartmentModel", b =>
                {
                    b.Navigation("UserModels");
                });

            modelBuilder.Entity("idflApp.Core.Models.FactoryModel", b =>
                {
                    b.Navigation("BookModels");
                });

            modelBuilder.Entity("idflApp.Core.Models.ProjectModel", b =>
                {
                    b.Navigation("FactoryModels");
                });

            modelBuilder.Entity("idflApp.Core.Models.StandardModel", b =>
                {
                    b.Navigation("ProjectModels");
                });

            modelBuilder.Entity("idflApp.Core.Models.UserModel", b =>
                {
                    b.Navigation("AccountVerifyModels");

                    b.Navigation("BookCompleteModels");

                    b.Navigation("BookUserModels");

                    b.Navigation("ProjectModels");

                    b.Navigation("UserInformationModels");
                });
#pragma warning restore 612, 618
        }
    }
}
